<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lomo Space</title>
  
  <subtitle>The unexamined life is not worth living.</subtitle>
  <link href="http://lomo.space/atom.xml" rel="self"/>
  
  <link href="http://lomo.space/"/>
  <updated>2022-01-14T11:40:22.883Z</updated>
  <id>http://lomo.space/</id>
  
  <author>
    <name>Lomo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s-app-node-port</title>
    <link href="http://lomo.space/2018/12/18/k8s-app-node-port/"/>
    <id>http://lomo.space/2018/12/18/k8s-app-node-port/</id>
    <published>2018-12-18T14:09:37.000Z</published>
    <updated>2022-01-14T11:40:22.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K8S-应用部署之-NodePort"><a href="#K8S-应用部署之-NodePort" class="headerlink" title="K8S 应用部署之 NodePort"></a>K8S 应用部署之 NodePort</h2><p>使用 <code>run</code> 命令直接创建一个简单的 <code>deployment</code>:</p><blockquote><p>kubectl run nginx-deployment –image&#x3D;nginx</p></blockquote><p>需要控制台会输出一些提示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure><p>提示, <code>run</code> <code>deployment</code> 的方式未来会被舍弃掉.</p><p>查看  pods:</p><p><img src="https://user-images.githubusercontent.com/18479611/70387256-20167c00-19de-11ea-809f-ca07609e011d.png" alt="image"></p><p>第一个即为刚创建的 pod. 第二个是之前测试 yml 方式创建的 pod（只是一个 pod, 具体参照 nginx-pod.yml 文件）</p><p>查看 <code>deployments</code>:</p><blockquote><p>kubectl get deployment -o wide</p></blockquote><p><img src="https://user-images.githubusercontent.com/18479611/70387264-36bcd300-19de-11ea-9d88-495e20c63d7e.png" alt="image"></p><p>查看 <code>svc</code>:</p><blockquote><p>kubectl get svc</p></blockquote><p><img src="https://user-images.githubusercontent.com/18479611/70387279-4a683980-19de-11ea-9d4f-09220132b9ca.png" alt="image"></p><p>目前还只有一个之前 <code>kubernetes</code> 这一个.</p><p>查看 <code>rs</code>:</p><blockquote><p>kubectl get rs</p></blockquote><p><img src="https://user-images.githubusercontent.com/18479611/70387288-6e2b7f80-19de-11ea-8ebb-73827716d5d9.png" alt="image"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ol><li>修改 <code>replicas</code> 的方式。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale --replicas=2 deployment/nginx-deployment</span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">deployment.apps/nginx-deployment scaled</span><br></pre></td></tr></table></figure><p>查验 <code>rs</code> 和 <code>pods</code>:</p><p><img src="https://user-images.githubusercontent.com/18479611/70387320-e72ad700-19de-11ea-98e2-e92f30b481b2.png" alt="image"></p><p>查看 <code>deployments</code>, 也变为2个了 (<code>kubectl get deployments</code>)</p><p>注意: 这时删除 <code>pod</code> 时，直接删除 pod 会触发 replicas 的确保机制, 从而导致删除 pod 失败. 正确做法是直接删除 pod 对应的 deployment.</p><ol start="2"><li>通过 svc</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment nginx-deployment --port=30001 --target-port=80</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">service/nginx-deployment exposed</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get svc 或 kubectl get services</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)     AGE</span><br><span class="line">kubernetes         ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP     14d</span><br><span class="line">nginx-deployment   ClusterIP   10.100.28.184   &lt;none&gt;        30001/TCP   4s</span><br></pre></td></tr></table></figure><blockquote><p>kubectl get pod -o wide</p></blockquote><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NAME                                READY   STATUS    RESTARTS   AGE     IP             NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-deployment-6c94df7599-gdcdn   1/1     Running   0          3m42s   192.168.1.23   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-6c94df7599-nhp7g   1/1     Running   0          7m7s    192.168.1.22   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-pod                           1/1     Running   1          14d     192.168.1.19   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Cluster-ip 是集群内部分配的地址，通过 curl 10.100.28.184:30001 即可访问.</p></blockquote><p>此时, 还不能在集群外访问内部的服务.</p><h3 id="对外服务"><a href="#对外服务" class="headerlink" title="对外服务"></a>对外服务</h3><p>编辑 <code>deployment</code> 的类型:</p><blockquote><p>kubectl edit svc nginx-deployment</p></blockquote><p><img src="https://user-images.githubusercontent.com/18479611/70387379-a8e1e780-19df-11ea-8f22-9c1e15963544.png" alt="edit-deployment"></p><p><code>tpye</code> 默认是 <strong>ClusterIP</strong>.</p><p>保存后, 可以看到控制台输出: <code>service/nginx-deployment edited</code></p><p>注：保存后，在无语法错误的前提下，该文件会被修改，如，里面的 nodePort: 30260, 即为集群对外暴露的访问端口，30001 是集群内访问端口号.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 svc:</span></span><br><span class="line">kubectl get svc -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)           AGE     SELECTOR</span><br><span class="line">kubernetes         ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP           14d     &lt;none&gt;</span><br><span class="line">nginx-deployment   NodePort    10.100.28.184   &lt;none&gt;        30001:30260/TCP   3m27s   run=nginx-deployment</span><br></pre></td></tr></table></figure><p>当然, pod&#x2F;deployment 也可以 edit.</p><blockquote><p>kubectl edit deployment nginx-deployment<br>kubectl edit pod nginx-pod</p></blockquote><p>测试访问:</p><p><img src="https://user-images.githubusercontent.com/18479611/70387413-037b4380-19e0-11ea-8947-e3e6eb6766a7.png" alt="image"></p><h3 id="资源对象创建方式"><a href="#资源对象创建方式" class="headerlink" title="资源对象创建方式"></a>资源对象创建方式</h3><ol><li><code>Run</code> 命令，通常是通过命令行方式去创建。</li></ol><blockquote><p>kubectl run nginx-deployment –image&#x3D;nginx:1.7.9 –replicas&#x3D;2</p></blockquote><ol start="2"><li><code>Apply</code> 方式</li></ol><blockquote><p>kubectl apply -f nginx.yaml</p></blockquote><p><code>Nginx.yml</code> 文件内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span> <span class="comment">#api的版本</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>          <span class="comment">#资源的类型</span></span><br><span class="line"><span class="attr">metadata:</span>                 <span class="comment">#资源的元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span>  <span class="comment">#资源的名称</span></span><br><span class="line"><span class="attr">spec:</span>                     <span class="comment">#资源的说明</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span>             <span class="comment">#副本2个，缺省为1</span></span><br><span class="line">  <span class="attr">template:</span>               <span class="comment">#pod模板</span></span><br><span class="line">    <span class="attr">metadata:</span>             <span class="comment">#pod元数据</span></span><br><span class="line">      <span class="attr">labels:</span>            <span class="comment">#标签</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">web_server</span>    <span class="comment">#标签选择器</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.79</span></span><br></pre></td></tr></table></figure><p><code>kubectl apply</code> 不但能够创建 Kubernetes 资源，也能对资源进行更新。</p><p>Kubernets 还提供了几个类似的命令，例如 <code>kubectl create</code>、<code>kubectl replace</code>、<code>kubectl edit</code> 和 <code>kubectl patch</code></p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><ol><li>基于命令的方式：</li></ol><p>  简单直观快捷，上手快。</p><p>  适合临时测试或实验</p><ol start="2"><li><p>基于配置文件的方式:</p><p> 配置文件描述了 具体是什么，即应用最终要达到的状态。</p><p> 配置文件提供了创建资源的模板，能够重复部署。</p><p> 可以像管理代码一样管理部署。</p><p> 适合正式的、跨环境的、规模化部署。</p><p> 这种方式要求熟悉配置文件的语法，有一定难度.</p></li></ol>]]></content>
    
    
    <summary type="html">K8S之应用部署[四]</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="k8s" scheme="http://lomo.space/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s-app</title>
    <link href="http://lomo.space/2018/12/12/k8s-app/"/>
    <id>http://lomo.space/2018/12/12/k8s-app/</id>
    <published>2018-12-12T15:07:49.000Z</published>
    <updated>2022-01-14T11:40:22.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K8S学习笔记之应用部署"><a href="#K8S学习笔记之应用部署" class="headerlink" title="K8S学习笔记之应用部署"></a>K8S学习笔记之应用部署</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>核心相关知识点</p><p><img src="https://user-images.githubusercontent.com/18479611/70387580-b4361280-19e1-11ea-8592-317ec7c3db8e.png" alt="concept"></p><p>Kubernetes集群（Cluster）也采用了典型的“主-从”架构。一个集群主要由管理组件（Master）和工作节点（Node）组件构成.</p><h4 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h4><p>Master组件提供所有与管理相关的操作，例如调度、监控、支持对资源的操作等。</p><p>Master会通过Node Controller来定期检查所管理的Node资源的健康状况，完成Node的生命周期管理.</p><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>Node是实际工作的计算实例（在1.1之前版本中名字叫做Minion）。节点可以是虚拟机或者物理机器，在创建 Kubernetes 集群过程中，都要预装一些必要的软件来响应Master的管理。</p><p>Node节点有几个重要的属性:</p><p><code>地址信息</code>、<code>阶段状态</code>、<code>资源容量</code>、<code>节点信息</code></p><ol><li>地址信息包括：</li></ol><ul><li>主机名（HostName）：节点所在系统的主机别名，基本不会用到；</li><li>外部地址（ExternalIP）：集群外部客户端可以通过该地址访问到的节点；</li><li>内部地址（InternalIP）：集群内可访问的地址，外部往往无法通过该地址访问节点。</li></ul><ol start="2"><li>段状态包括：</li></ol><ul><li>待定（Pending）：新创建节点，还未就绪状态，需要进一步的配置；</li><li>运行中（Running）：正常运行中的节点，可被分配Pod，会定期汇报运行状态消息；</li><li>终止（Terminated）：节点已经停止，处于不可用状态，判断条件为5分钟内未收到运行状态消息。</li></ul><ol start="3"><li>资源容量：</li></ol><ul><li>包括常见操作系统资源：</li></ul><ul><li>如CPU、内存、最多存放的Pod个数等</li></ul><ol start="4"><li>节点信息：</li></ol><ul><li>包括操作系统内核信息</li><li>Kubernetes版本信息</li><li>Docker 引擎版本信息等，会由kubelet定期汇报</li></ul><h4 id="资源对象"><a href="#资源对象" class="headerlink" title="资源对象"></a>资源对象</h4><ol><li>核心资源</li></ol><ul><li>容器组（Pod）：由位于同一节点上若干容器组成，彼此共享网络命名空间和存储卷（Volume）。Pod是Kubernetes中进行管理的最小资源单位，是最为基础的概念。跟容器类似，Pod是短暂的，随时可变的</li><li>服务（Service）：若干（往往是同类型的）Pod形成的对外提供某个功能的抽象，不随Pod改变而变化，带有唯一固定的访问路径， 如IP地址或者域名</li><li>复制控制器（Replication Controller）：负责启动Pod，并维护其健康运行的状态。是用户管理Pod的句柄</li><li>部署（Deployment）：创建Pod，并可根据参数自动创建管理 Pod的复制控制器，并且支持升级。1.2.0版本引入提供比复制控制器更方便的操作</li><li>横向Pod扩展器（Horizontal Pod Autoscaler，HPA）：类似云里面的自动扩展组，根据Pod的使用率（典型如CPU）自动调整一个部 署里面Pod的个数，保障服务可用性</li></ul><ol start="2"><li>辅助概念</li></ol><ul><li>注解（Annotation）：键值对，可以存放大量任意数据，一般用来添加对资源对象的详细说明，可供其他工具处理</li><li>标签（Label）：键值对，可以标记到资源对象上，用来对资源进行分类和筛选</li><li>名字（Name）：用户提供给资源的别名，同类资源不能重名</li><li>命名空间（Namespace）：这里是指资源的空间，避免不同租户的资源发生命名冲突，另外可以进行资源限额</li><li>持久卷（PersistentVolume）：类似于Docker中数据卷的概念，就是一个数据目录，Pod对其有访问权限</li><li>秘密数据（Secret）：存放敏感数据，例如用户认证的口令等</li><li>选择器（Selector）：基于标签概念的一个正则表达式，可通过标签来筛选出一组资源</li><li>Daemon集（DaemonSet）：确保节点上肯定运行某个Pod，一般用来采集日志和监控节点</li><li>任务（Job）：确保给定数目的Pod正常退出（完成了任务）</li><li>入口资源（Ingress Resource）：用来提供七层代理服务</li><li>资源限额（Resource Quotas）：用来限制某个命名空间下对资源的使用，开始逐渐提供多租户支持</li><li>安全上下文（Security Context）：应用到容器上的系统安全配置，包括uid、gid、capabilities、SELinux角色等</li><li>服务账号（Service Accounts）：操作资源的用户账号</li></ul><h3 id="nginx-服务"><a href="#nginx-服务" class="headerlink" title="nginx 服务"></a>nginx 服务</h3><blockquote><p>默认情况下, 集群对外暴露的端口范围为 30000 ~ 32767 之间.</p></blockquote><p>以 <code>Nginx</code> 为例, 创建 nginx-pod.yaml 文件:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>      <span class="comment"># 描述文件所遵循KubernetesAPI的版本</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Pod</span>           <span class="comment"># 描述的类型是pod</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx-pod</span>   <span class="comment"># pod的名称</span></span><br><span class="line">    <span class="attr">labels:</span>           <span class="comment"># 标签</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">      <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-pod</span>     <span class="comment"># 容器名</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.15</span>   <span class="comment"># 镜像名称及版本</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span>   <span class="comment"># 如果本地不存在就去远程仓库拉取</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span>   <span class="comment"># pod对外端口</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>在 <code>master/cluster</code> 节点上执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f /path/to/nginx-pod/yaml</span><br></pre></td></tr></table></figure><p>查看:</p><blockquote><p>kubectl get pods -o wide</p></blockquote><p><img src="https://user-images.githubusercontent.com/18479611/70387047-4be43280-19db-11ea-8f4d-d15461f39e7c.png" alt="all-pods"></p><p>如何在集群外访问该服务？</p><p>方式1(端口转发):</p><blockquote><p>kubectl port-forward –address 0.0.0.0 nginx-pod 9999:80</p></blockquote><p>访问 <a href="http://192.168.56.104:9999/">http://192.168.56.104:9999/</a></p><p><img src="https://user-images.githubusercontent.com/18479611/70387064-86e66600-19db-11ea-98f6-50cbba2c06da.png" alt="nginx-visit-screenshot"></p><p>很容易发现， 通过端口转发的方式只适合本地测试使用,一旦 <code>port-forward</code> 的进程终止后, 服务就无法访问了.</p><p>当然通过 <code>nohup</code> 等类似方式实现进程后台运行也可以, 但是终究不够优雅, 这也不是官方推荐的, <code>prod</code> 环境下, 更不推荐如此的使用!</p><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><p>Q：创建 pod</p><p>A：命令：<code>kubectl apply -f nginx-pod.yaml</code></p><p>Q：创建 service</p><p>A：命令：kubectl apply -f nginx-nodePort.yaml 发布该 service<br>  假设 service的 nginx-nodePort.yam文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-test-nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span><span class="comment"># 服务端口, 内部可访问</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span><span class="comment"># 目标端口, 此处指的是pod的8080端口</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30080</span><span class="comment"># 节点端口, 外部可访问</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>Q：删除 service</p><p>A：假设 service 创建时使用的是 nginx-nodePort.yaml，则删除时，直接：</p><blockquote><p>kubectl delete -f nginx-nodePort.yaml</p></blockquote><p>Q：卸载 kubernets</p><p>A：kubeadm reset</p><h3 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h3><ol><li>传统方式</li></ol><p>手动安装, 需要解决各种证书、依赖等等的问题</p><ol start="2"><li>简单的部署方式 （Kubeadm）</li></ol><p>一种实现自我管理的方式，包括 k8s 本身自己。</p><p>Kubeadm 工具，k8s 官方提供的集群部署管理工具。</p><p>K8s 的组件均以容器方式运行。</p><p>Master 结点上的 4 个组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scheduler</span><br><span class="line">Controller manage</span><br><span class="line">Api server</span><br><span class="line">Etcd</span><br></pre></td></tr></table></figure><p>上述 master 四个组件也运行在 POD 上（静态 POD。</p><p><img src="https://user-images.githubusercontent.com/18479611/70387545-3b36bb00-19e1-11ea-9f6f-578246126925.png" alt="image"></p><ol start="3"><li>一键部署(脚本)工具参考:</li></ol><p><code>kubeasz</code> 工具</p><p><a href="https://github.com/easzlab/kubeasz">https://github.com/easzlab/kubeasz</a></p><ol start="4"><li>生产环境部署</li></ol><p>部署规模化生产环境的需求，推荐使用 <code>kops</code> 或者 <code>SaltStack</code> 这样更复杂的部署工具(根据张磊老师推荐)</p>]]></content>
    
    
    <summary type="html">K8S之应用部署[三]</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="k8s" scheme="http://lomo.space/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s-config</title>
    <link href="http://lomo.space/2018/12/10/k8s-config/"/>
    <id>http://lomo.space/2018/12/10/k8s-config/</id>
    <published>2018-12-10T14:31:26.000Z</published>
    <updated>2022-01-14T11:40:22.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K8S-学习笔记之–集群配置"><a href="#K8S-学习笔记之–集群配置" class="headerlink" title="K8S 学习笔记之–集群配置"></a>K8S 学习笔记之–集群配置</h2><blockquote><p>借助 kubeadm 这一工具快速完成搭建与学习.</p></blockquote><h3 id="安装初始化工具"><a href="#安装初始化工具" class="headerlink" title="安装初始化工具"></a>安装初始化工具</h3><p>主要是: kubeadm, kubelet, kubectl （所有机器上都需要）</p><p>创建 <code>repo</code> 源:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br></pre></td></tr></table></figure><p>安装:</p><blockquote><p>yum install -y kubelet kubeadm kubectl –disableexcludes&#x3D;kubernetes</p></blockquote><p><img src="https://user-images.githubusercontent.com/18479611/70376288-4981ca00-1942-11ea-972a-1bf115d5e1b7.png" alt="image"></p><p>启动初始化工具并设定随机启动:</p><blockquote><p>systemctl enable kubelet &amp;&amp; systemctl start kubelet</p></blockquote><p>解除防火墙限制:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入以下内容</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新配置使其生效</span></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/18479611/70376344-07a55380-1943-11ea-88b9-5376a45301ac.png" alt="image"></p><p>预下载&#x2F;拉取镜像（Master 机器执行):</p><blockquote><p>kubeadm config images list # 查看集群初始化所需镜像及依赖版本号</p></blockquote><p><img src="https://user-images.githubusercontent.com/18479611/70376349-2572b880-1943-11ea-9651-e3289921ff0d.png" alt="image"></p><p>一般会失败，需要手动拉取，从阿里云拉取。使用脚本统一一次性拉取:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> scripts</span><br><span class="line">vi k8s_base_image.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本具体内容: <a href="https://gitee.com/lomospace/k8s/blob/master/scripts/k8s_base_image.sh">https://gitee.com/lomospace/k8s/blob/master/scripts/k8s_base_image.sh</a></p><p>执行脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> scripts</span><br><span class="line">. k8s_base_image.sh <span class="comment"># 或 source k8s_base_image.sh</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/18479611/70376401-a6ca4b00-1943-11ea-9a94-fe8cfe0ec62d.png" alt="image"></p><p>通过 <code>kubeadm config images pull</code> 确认镜像拉取成功:</p><p><img src="https://user-images.githubusercontent.com/18479611/70376414-c6fa0a00-1943-11ea-8b5b-40d987a8471d.png" alt="image"></p><h3 id="初始化-kubeadm-master"><a href="#初始化-kubeadm-master" class="headerlink" title="初始化 kubeadm(master)"></a>初始化 kubeadm(master)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.16.2 --apiserver-advertise-address=192.168.56.104 --pod-network-cidr=192.168.0.0/16</span><br></pre></td></tr></table></figure><p>报错了:<br><img src="https://user-images.githubusercontent.com/18479611/70376431-00327a00-1944-11ea-8c03-6ba098d738bb.png" alt="image"></p><p>解决方案: 修改 虚拟机 CPU，重启后重新执行<code>kubeadm init</code>操作即可.</p><p>init 常用主要参数:</p><ul><li>–kubernetes-version: 指定Kubenetes版本，如果不指定该参数，会从google网站下载最新的版本信息</li><li>–pod-network-cidr: 指定pod网络的IP地址范围，它的值取决于你在下一步选择的哪个网络网络插件</li><li>–apiserver-advertise-address: 指定master服务发布的Ip地址，如果不指定，则会自动检测网络接口，通常是内网IP。</li><li>–feature-gates&#x3D;CoreDNS: 是否使用CoreDNS，值为true&#x2F;false，CoreDNS插件在1.10中提升到了Beta阶段，最终会成为Kubernetes的缺省选项</li></ul><p>Init 过程日志输出:</p><p><img src="https://user-images.githubusercontent.com/18479611/70376474-60c1b700-1944-11ea-9297-0ec5c9b41d63.png" alt="image"></p><blockquote><p>默认情况下, 生成的 token 有效期为 24h</p></blockquote><p>继续:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>该步骤必须执行, 否则会提示: <code>The connection to the server localhost:8080 was refused - did you specify the right host or port?</code></p><p>查看 <code>pods</code> 状态</p><blockquote><p>kubectl get pods -n kube-system</p></blockquote><p><img src="https://user-images.githubusercontent.com/18479611/70376523-b6965f00-1944-11ea-8117-9312230305d7.png" alt="image"></p><h3 id="Node-加入"><a href="#Node-加入" class="headerlink" title="Node 加入"></a>Node 加入</h3><p>在上面 <code>init</code> 最后, 输出了形如: <code>kubeadm join 192.168.56.104:6443 --token ........ </code>, 复制，然后在 node 机器上执行即可.</p><p>查看所有 <code>nodes</code>:</p><blockquote><p>kubectl get nodes</p></blockquote><p>此时发现均为 <code>NotReady</code> 状态, 因为 <code>master</code> 节点还未安装网络插件.</p><h3 id="安装网络插件-master"><a href="#安装网络插件-master" class="headerlink" title="安装网络插件(master)"></a>安装网络插件(master)</h3><blockquote><p>kubectl apply -f <a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</a></p></blockquote><p>部署完成后， 过一会即可看到它自动刷新后的结果:</p><p><img src="https://user-images.githubusercontent.com/18479611/70376586-39b7b500-1945-11ea-8225-4f39afb2c207.png" alt="image"></p><p>注意: 集群中的master和node节点的hostname不能重复，否则会加入集群失败!!!</p><h3 id="相关操作命令"><a href="#相关操作命令" class="headerlink" title="相关操作命令"></a>相关操作命令</h3><p>删除集群中的 <code>node</code>:</p><blockquote><p>kubectl delete node node3</p></blockquote><p>重新创建 token:</p><blockquote><p>kubeadm token create</p></blockquote><p>查看 token:</p><blockquote><p>Kubeadm token list</p></blockquote><p>查找 hash:</p><blockquote><p>openssl x509 -pubkey -in &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt | openssl rsa -pubin -outform der 2&gt;&#x2F;dev&#x2F;null | openssl dgst -sha256 -hex | sed ‘s&#x2F;^.* &#x2F;&#x2F;‘</p></blockquote>]]></content>
    
    
    <summary type="html">k8s之集群初始化&amp;配置[二]</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="k8s" scheme="http://lomo.space/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s-virtual-machine</title>
    <link href="http://lomo.space/2018/12/07/k8s-virtual-machine/"/>
    <id>http://lomo.space/2018/12/07/k8s-virtual-machine/</id>
    <published>2018-12-07T13:45:48.000Z</published>
    <updated>2022-01-14T11:40:22.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K8S-学习笔记之开山篇–虚拟机配置"><a href="#K8S-学习笔记之开山篇–虚拟机配置" class="headerlink" title="K8S 学习笔记之开山篇–虚拟机配置"></a>K8S 学习笔记之开山篇–虚拟机配置</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>所需软件: VirtualBox(测试所用物理机为 MBP 顶配)</p><blockquote><p>本地虚拟机集群, 所有机器均借助 VirtualBox 和 CentOS7 实现.</p></blockquote><p>虚拟主机系统统一采用：CentOS-7-x86_64-Minimal-1804.iso</p><p>iso 下载地址: <a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1804.iso">http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1804.iso</a></p><ol><li>新建三台虚拟机分别设置 <code>hostname</code> 为 <code>k8s-master</code>, <code>k8s-node01</code>, <code>k8s-node02</code></li></ol><blockquote><p>设置 hostname 使用 hostnamectl 命令即可</p></blockquote><p>如: <code>hostnamectl set-hostname k8s-node01</code></p><blockquote><p>虚拟机启动后, 窗口调整快捷键为: command + c</p></blockquote><p>虚拟机安装使用可参考: <a href="https://blog.csdn.net/yang_yun_hao/article/details/87917657">https://blog.csdn.net/yang_yun_hao/article/details/87917657</a></p><ol start="2"><li>虚拟机无法连接外网问题解决:</li></ol><p>1&gt; virtualbox 设置</p><p>偏好设置 -&gt; 网络 -&gt; 添加新 NAT 网络, 双击并勾选启用网络、支持 DHCP</p><p><img src="https://user-images.githubusercontent.com/18479611/70375745-9a8ebf80-193c-11ea-8a5f-0083d5aa19ca.png" alt="image"></p><ol start="3"><li>CentOS 网络设置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="line"><span class="comment"># 将 ONBOOT = no 改为 yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再重启</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或重启网卡服务即可</span></span><br><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>默认情况下, 虚拟机的 <code>IP</code> 由 VirtualBox的 <code>DHCP</code> 服务动态分配, 这在多态虚拟机的情况下不好管理, 最好一台机器固定一个 <code>IP</code>, 这时就需要配置静态 <code>IP</code>.</p><p>管理 -&gt; 主机网络管理器，点击创建按钮即可。</p><p><img src="https://user-images.githubusercontent.com/18479611/70375829-97e09a00-193d-11ea-9467-a94dd5e8b1d1.png" alt="image"></p><p>然后每个虚拟机配置上该网卡即可。</p><blockquote><p>ip addr|grep inet</p></blockquote><ol start="4"><li>ssh login 配置</li></ol><p>配置这个, 是为了方便直接在物理机登陆虚拟机系统, 方便操作.</p><p>方式1:<br>使用 <code>ssh-copy-id</code> 命令将 key 写到远程机器的 ~&#x2F;.ssh&#x2F;authorized_key 文件中.</p><p>(该方法必须2端操作时为同一个用户名)</p><p>方式2:</p><p>将 本地机器的 rsa copy 至所需登陆的服务机器上.</p><blockquote><p>scp ~&#x2F;.ssh&#x2F;id_rsa.pub <a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#x35;&#54;&#x2e;&#x31;&#48;&#x31;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#x35;&#54;&#x2e;&#x31;&#48;&#x31;</a>:.ssh&#x2F;id_rsa.pub</p></blockquote><p>在B上的命令 (先于 A执行，A - 为本地机器):</p><blockquote><p>touch &#x2F;root&#x2F;.ssh&#x2F;authorized_keys # (如果已经存在这个文件, 跳过这条)</p></blockquote><p>将id_rsa.pub文件从 A本地机器上 上传到 B 机器后再执行该操作：</p><blockquote><p>cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub &gt;&gt; &#x2F;root&#x2F;.ssh&#x2F;authorized_keys # (将id_rsa.pub的内容追加到authorized_keys 中)</p></blockquote><p>测试登陆:</p><p>ssh root@k8s-master</p><p>ok.</p><p>添加 alias 更方便登陆:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="comment"># k8s 集群信息</span></span><br><span class="line"><span class="built_in">alias</span> k8s_master=<span class="string">&quot;ssh root@k8s-master&quot;</span></span><br><span class="line"><span class="built_in">alias</span> k8s_node01=<span class="string">&quot;ssh root@k8s-node01&quot;</span></span><br><span class="line"><span class="built_in">alias</span> k8s_node02=<span class="string">&quot;ssh root@k8s-node02&quot;</span></span><br></pre></td></tr></table></figure><h3 id="系统基础软件安装-amp-配置"><a href="#系统基础软件安装-amp-配置" class="headerlink" title="系统基础软件安装&amp;配置"></a>系统基础软件安装&amp;配置</h3><h4 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h4><blockquote><p>每台机器都安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget</span><br></pre></td></tr></table></figure><h4 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h4><p>2.1 关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br></pre></td></tr></table></figure><p>2.2 关闭 selinux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 &amp;&amp; sed -i <span class="string">&quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot;</span> /etc/selinux/config</span><br><span class="line"><span class="comment"># 此处无输出任何内容哈.</span></span><br></pre></td></tr></table></figure><p>2.3 关闭 swap</p><p>单纯的执行 <code>swapoff</code> 只是临时关闭, 下次重启后还是会打开. 因此需要修改文件: </p><blockquote><p>vim &#x2F;etc&#x2F;fstab # 将 swap 分区一行注释即可.</p></blockquote><p><img src="https://user-images.githubusercontent.com/18479611/70375981-505b0d80-193f-11ea-9a5d-e09261ddfdd5.png" alt="image"></p><p>使用命令行关闭方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a &amp;&amp; sed -i <span class="string">&quot;s/\/dev\/mapper\/centos-swap/\#\/dev\/mapper\/centos-swap/g&quot;</span> /etc/fstab</span><br></pre></td></tr></table></figure><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><ol><li>安装<br>为了加速在国内安装, 使用阿里云镜像:</li></ol><blockquote><p>wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p></blockquote><p>安装 docker（所有机器执行）：</p><blockquote><p>yum install docker-ce -y</p></blockquote><p>但是提示没有可用软件包(-_-||):</p><p><img src="https://user-images.githubusercontent.com/18479611/70376041-d4ad9080-193f-11ea-96cb-906972bd2a1e.png" alt="image"></p><p>解决方案1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依次执行如下命令: </span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install docker-ce -y  <span class="comment"># 非一般的速度就下载安装完毕 docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">docker -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line">Docker version 19.03.4, build 9013bf583a</span><br></pre></td></tr></table></figure><p>解决方案2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sudo yum install docker-ce -y</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/18479611/70376091-3d950880-1940-11ea-88cf-90500216dc43.png" alt="image"></p><ol start="2"><li>配置(master、node 均需要)</li></ol><p>启动 docker 并设定随机启动: <code>systemctl enable docker &amp;&amp; systemctl start docker</code></p><p><img src="https://user-images.githubusercontent.com/18479611/70376119-7e8d1d00-1940-11ea-9e88-970bb1541e40.png" alt="image"></p><p>调整 <code>docker</code> 部分参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加如下内容:</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;exec-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;native.cgroupdriver=systemd&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-file&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;max-size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;100m&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;storage-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;overlay2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;storage-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;overlay2.override_kernel_check=true&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://5twf62k1.mirror.aliyuncs.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>修改前：<br>确认 docker 的 Cgroup Driver 信息：</p><blockquote><p>docker info |grep Cgroup</p></blockquote><blockquote><p>默认是  Cgroup Driver: cgroupfs</p></blockquote><p>修改后：</p><blockquote><p>Cgroup Driver: systemd</p></blockquote><p>重启 docker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /etc/systemd/system/docker.service.d</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/18479611/70376181-21de3200-1941-11ea-9f73-5f6f07dd7824.png" alt="image"></p>]]></content>
    
    
    <summary type="html">k8s之机器配置[一]</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="k8s" scheme="http://lomo.space/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>docker deploy</title>
    <link href="http://lomo.space/2018/12/02/docker-deploy/"/>
    <id>http://lomo.space/2018/12/02/docker-deploy/</id>
    <published>2018-12-02T11:12:08.000Z</published>
    <updated>2022-01-14T11:40:22.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-部署问题记录"><a href="#Docker-部署问题记录" class="headerlink" title="Docker 部署问题记录"></a>Docker 部署问题记录</h2><blockquote><p>主要是针对容器内应用网络访问问题的一次小记.</p></blockquote><h3 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h3><p>由于种种缘由，使用了一个开源的 BI 服务 ( Metabase )。起初，该服务在测试环境部署时毅然选择了当下主流技术：Docker。测试环境部署以及使用了一段时间后，产生了一些数据，这些数据也需要随之迁移至线上环境。该服务写了一个数据在宿主机的磁盘上，以 <code>.db</code> 文件的形式存在。</p><h3 id="上线过程折腾"><a href="#上线过程折腾" class="headerlink" title="上线过程折腾"></a>上线过程折腾</h3><h4 id="镜像迁移"><a href="#镜像迁移" class="headerlink" title="镜像迁移"></a>镜像迁移</h4><p>将测试环境的容器镜像 <code>commit</code> 出来一个新的镜像，然后将该镜像部署至线上机器的容器中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit 镜像</span></span><br><span class="line">sudo docker commit e7afe xx/xx-bi</span><br><span class="line">    sha256:49f050dcb3 ... ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存镜像</span></span><br><span class="line">sudo docker save -o /home/xx/xx-bi.tar xx/xxxx-bi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，将新 <code>commit</code> 出来的镜像 <code>.tar</code> 包文件弄出来，什么 <code>scp</code>, <code>ftp</code> 之类的。</p><p>当然使用 <code>docker save</code>后保存的文件再被 download 时可能提示权限问题，使用 <code>chmod</code> 命令解决即可。</p><blockquote><p>推荐使用 docker save&#x2F;load, 使用 docker export&#x2F;import 可能有一些问题，二期导出来的包内容也不一样，可自行比较。</p></blockquote><h4 id="镜像部署"><a href="#镜像部署" class="headerlink" title="镜像部署"></a>镜像部署</h4><p>机器：xxxx</p><p>线上域名：xxx.xx.com</p><p>将上面的镜像搞到线上机器后，使用 <code>docker load</code> 命令将该镜像加载.</p><p>Nginx 配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upstream $<span class="punctuation">&#123;</span>server_name<span class="punctuation">&#125;</span> <span class="punctuation">&#123;</span></span><br><span class="line">    server xxx.xxx.com<span class="punctuation">:</span><span class="number">3000</span>;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后，创建容器，启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p 3000:3000 -v ~/metabase-data:/metabase-data -e <span class="string">&quot;MB_DB_FILE=/metabase-data/metabase.db&quot;</span> --name 容器名 镜像名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="坑的排除"><a href="#坑的排除" class="headerlink" title="坑的排除"></a>坑的排除</h4><blockquote><p><code>sudo docker ps -a</code> 可以看到启动的容器，但是该服务链接数据库时，就是链接不上 ！！！</p></blockquote><p>进入容器，<code>sudo docker exec -it xxx /bin/bash</code>, <code>ping</code> 数据库发现无法连通。但是在测试环境该方式是正常的。</p><p>怀疑环境隔离问题，新搞一个 <code>mysql</code> 容器服务来测试一下.</p><p><code>mysql</code> 镜像直接使用阿里的即可，参考：<a href="https://www.cnblogs.com/loovelj/p/7823093.html">https://www.cnblogs.com/loovelj/p/7823093.html</a></p><p>启动该容器，进入容器内使用 <code>mysql</code> 链接时，发现还是无法链接。查看官方文档了解到 <code>docker network</code>: <a href="https://docs.docker.com/network/">https://docs.docker.com/network/</a></p><p>重新创建一个 <code>mysql</code> 容器服务，并指定 <code>network</code>, <code>--net host</code>, 成功链接。</p><p>最后，删除原来的容器服务，重新创建容器并指定 <code>network</code>, 至此问题解决。</p>]]></content>
    
    
    <summary type="html">Docker 应用部署问题记录</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="docker" scheme="http://lomo.space/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>python pdb</title>
    <link href="http://lomo.space/2018/11/10/python-pdb/"/>
    <id>http://lomo.space/2018/11/10/python-pdb/</id>
    <published>2018-11-10T14:41:16.000Z</published>
    <updated>2022-01-14T11:40:22.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pdb-调试小记"><a href="#pdb-调试小记" class="headerlink" title="pdb 调试小记"></a>pdb 调试小记</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>业务层接口获取数据 <code>GET</code> 新接口时, 遇到以下错误 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: Could not locate column <span class="keyword">in</span> row <span class="keyword">for</span> column <span class="string">&#x27;iteritems&#x27;</span> </span><br></pre></td></tr></table></figure><h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><p>Debug 过程:</p><p>首先，在 <code>controller</code> 层接口代码添加 <code>pdb</code> 调试入口.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">lotan_session, offset, limit</span>):</span><br><span class="line">    scores = QualityScoreDAO.get_list_scores(offset=offset, limit=limit)</span><br><span class="line">    <span class="keyword">import</span> pdb</span><br><span class="line">    pdb.set_trace()</span><br><span class="line">    <span class="keyword">return</span> [lotan_session.build_model(QualityScore, <span class="built_in">id</span>=score.<span class="built_in">id</span>) <span class="keyword">for</span> score <span class="keyword">in</span> scores]</span><br></pre></td></tr></table></figure><p>然后，重启服务，模拟请求，程序运行到按照设置的 <code>pdb</code> 处，终端进入另一个类似 <code>python</code>的 <code>console</code>, 即开启 <code>pdb</code> 调试.</p><p>过程如图:</p><p><img src="https://images.gitee.com/uploads/images/2018/1202/155233_21138d27_1120068.png" alt="错误的" title="debug_error.png"></p><p>注意到 <code>lotan_session.build_model(QualityScore, id=score.id)</code>, 在 <code>build</code> model 时，使用了 <code>QualityScore</code> 这个数据模型, 且根据 <code>id 这个字段来进行定义 </code>build&#96;,  而该数据模型类定义的方法为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">resolve_by_id</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> QualityScoreDAO.get_by_id(self.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其调用了 QualityScoreDAO 的 get_by_id 方法.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DAO 层的 get_by_id 方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_by_id</span>(<span class="params">cls, id_</span>):</span><br><span class="line">        sql = db.tables.quality_score.select().where(</span><br><span class="line">            db.tables.quality_score.c.<span class="built_in">id</span> == id_</span><br><span class="line">        )</span><br><span class="line">        score = db.tables.execute(sql).fetchone()</span><br><span class="line">        <span class="keyword">if</span> score:</span><br><span class="line">            <span class="keyword">return</span> score</span><br></pre></td></tr></table></figure><h3 id="源码走读"><a href="#源码走读" class="headerlink" title="源码走读"></a>源码走读</h3><p>查看 <code>lotan</code> 的  <code>build_model</code> 方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_model</span>(<span class="params">self, model_cls, **kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(model_cls, six.string_types):</span><br><span class="line">        model_cls = ModelManager().find_model_by_name(model_cls)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> model_cls:</span><br><span class="line">        <span class="keyword">raise</span> NameError(<span class="string">&quot;Model &#x27;%s&#x27; is not defiend.&quot;</span> % model_cls)</span><br><span class="line">    model = model_cls(**kwargs)</span><br><span class="line">    model.attach_session(self)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><p>前面的 <code>if</code> 只是简短的类型判断. 关键: <code>find_model_by_name</code> 这个方法, 该方法定义:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ModelManager 的类, 元类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelManager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    __metaclass__ = SingletonMeta</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._models_map = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register_model</span>(<span class="params">self, model_cls</span>):</span><br><span class="line">        self._models_map[model_cls.__name__] = model_cls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unregister_model</span>(<span class="params">self, model_cls</span>):</span><br><span class="line">        self._models_map.pop(model_cls.__name__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_model_by_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">return</span> self._models_map.get(name)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">models</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._models_map.itervalues()</span><br></pre></td></tr></table></figure><p><code>__metaclass__ = SingletonMeta</code> 表示创建 <code>ModelManager</code> 这个类对象时会采用 <code>SingletonMeta</code>类 来创建 <code>ModelManager</code> 类. 故, <code>SingletonMeta</code> 类在此处是 <code>ModelManager</code> 的元类。</p><h3 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h3><p><code>__init__</code> 中初始化了 名为<code>_models_map</code> 的 <code>dict</code>, 从 <code>.get()</code> 方法基本可以确定需要传入的参数是一个 <code>dict</code> 类型.</p><p>进而返回查看: <code>return score</code>, 使用 <code>pdb</code> 查看该变量属性:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) <span class="built_in">type</span>(score)</span><br><span class="line">&lt;class <span class="string">&#x27;sqlalchemy.engine.result.RowProxy&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>类型明显不对. 即问题所在 <code>return</code> 处。将返回改为 <code>dict(score)</code> 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) dict(score)</span><br><span class="line">&#123;<span class="string">&#x27;end_type&#x27;</span>: <span class="string">&#x27;sdf&#x27;</span>, <span class="string">&#x27;version&#x27;</span>: <span class="string">&#x27;2.0&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>: datetime.datetime(2017, 11, 28, 18, 22, 36), <span class="string">&#x27;updated_at&#x27;</span>: datetime.datetime(2017, 11, 28, 18, 22, 36), <span class="string">&#x27;pa_name&#x27;</span>: <span class="string">&#x27;mxxe-platform&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: 0.972, <span class="string">&#x27;id&#x27;</span>: 122, <span class="string">&#x27;origin_score&#x27;</span>: 102&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.gitee.com/uploads/images/2018/1202/162815_953b1db0_1120068.png" alt="正确结果" title="success.png"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><code>PDB</code> 具体用法, <a href="https://www.ibm.com/developerworks/cn/linux/l-cn-pythondebugger/index.html">https://www.ibm.com/developerworks/cn/linux/l-cn-pythondebugger/index.html</a></p><p><code>Python</code> 元类, <a href="http://blog.jobbole.com/21351/">http://blog.jobbole.com/21351/</a></p>]]></content>
    
    
    <summary type="html">pdb调试小记</summary>
    
    
    
    <category term="program" scheme="http://lomo.space/categories/program/"/>
    
    
    <category term="Python" scheme="http://lomo.space/tags/Python/"/>
    
    <category term="PDB" scheme="http://lomo.space/tags/PDB/"/>
    
  </entry>
  
  <entry>
    <title>stored procedure</title>
    <link href="http://lomo.space/2018/10/10/stored-procedure/"/>
    <id>http://lomo.space/2018/10/10/stored-procedure/</id>
    <published>2018-10-10T14:50:32.000Z</published>
    <updated>2022-01-14T11:40:22.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>存储过程，类似程序语言的一组&#x2F;系列 实现特定功能的 <code>SQL</code> 组合(包含了常见的 SQL 语句、基本的流程控制, if else、 case when then、concat 等等).</p><p>它经过编译后存储在数据库中, 以后不需要再次编译而可以直接调用(call).</p><p>存储过程的格式类似函数, 有名字、参数.</p><p>常用的 <code>MySQL</code>, 其存储过程的定义有三种参数类型: <code>in</code>, <code>out</code>, <code>inout</code></p><h3 id="创建-x2F-使用-x2F-删除"><a href="#创建-x2F-使用-x2F-删除" class="headerlink" title="创建&#x2F;使用&#x2F;删除"></a>创建&#x2F;使用&#x2F;删除</h3><p>创建:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- # 关键字 create 和 procedure</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> sp_xxName()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- # ...</span></span><br><span class="line"><span class="comment">-- # ...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>调用:</p><p><code>call sp_xxName()</code>, 调用时 存储过程名后面必须加 <code>()</code>, 无论其定义时是否有参数.</p><p>删除:</p><p><code>drop procedure sp_xxName()</code></p><p>查看:</p><p><code>show procedure status</code></p><blockquote><p>显示数据库中所有存储的存储过程基本信息，包括所属数据库，存储过程名称，创建时间等</p></blockquote><p><code>show create procedure sp_name</code></p><blockquote><p>显示某一个mysql存储过程的详细信息</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>以 <code>MySQL</code> DBMS 为例.</p><p>e.g.1 不带参数的存储过程</p><p>创建一个简单(不带参数)的存储过程：</p><p><code>create procedure sp_test() select 1;</code></p><p>查看创建的这个存储过程：</p><p><code>show create procedure sp_test;</code></p><p><img src="https://images.gitee.com/uploads/images/2018/1110/230726_dccf1593_1120068.png" alt="sp_test" title="sp_test.png"></p><p>调用存储过程：</p><p><code>call sp_test();</code></p><p><img src="https://images.gitee.com/uploads/images/2018/1110/230812_cc13cc8c_1120068.png" alt="call_sp_test" title="call_sp_test.png"></p><p>e.g.2 带输入参数</p><p>输入参数(in关键字)，调用存储过程时必须要传入该参数，且存储过程中修改该参数的值不能被返回.</p><blockquote><p>DELIMITER原本就是“；”的意思，因此用这个命令转换一下“；”为“&#x2F;&#x2F;”，这样只有收到“&#x2F;&#x2F;”才认为指令结束可以执行.</p></blockquote><p>创建一个带参数的存储过程:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> sp1_test(<span class="keyword">in</span> p <span class="type">int</span>)</span><br><span class="line">comment <span class="string">&#x27; insert into value &#x27;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> v1 <span class="type">int</span>;</span><br><span class="line"><span class="keyword">set</span> v1 <span class="operator">=</span> p;</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> test(id) <span class="keyword">values</span>(v1);</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><p><img src="https://images.gitee.com/uploads/images/2018/1110/231005_f92c1435_1120068.png" alt="sp1_test" title="sp1_test.png"></p><p>调用存储过程：</p><p><code>call sp1_test(1); //</code></p><p>e.g.3(带输出参数)</p><blockquote><p>关键字out，表示该参数值 在 存储过程内部 改变并返回该值；</p></blockquote><p>创建存储过程:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> sp2_test(<span class="keyword">out</span> p <span class="type">int</span>)</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(id) <span class="keyword">into</span> p <span class="keyword">from</span> test;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>调用:</p><p>必须要加 <strong>@</strong> 符号！</p><p><code>call sp2_test(@max); //</code></p><p><img src="https://images.gitee.com/uploads/images/2018/1110/231213_18c1d2ed_1120068.png" alt="sp2_test" title="sp2_test.png"></p><p>获取调用后的结果:</p><p><code>select @max; //</code></p><p><img src="https://images.gitee.com/uploads/images/2018/1110/231256_f2e43a40_1120068.png" alt="调用后的结果" title="调用后的结果.png"></p><p>e.g.4 (带输入输出参数)</p><p>创建:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> sp3_test <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> sp3_test(<span class="keyword">in</span> p <span class="type">int</span> , <span class="keyword">out</span> s <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">if p <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@v</span> <span class="operator">=</span> <span class="number">111</span>;  <span class="operator">/</span><span class="operator">/</span> 与<span class="keyword">declare</span> 声明变量方式类似，该方式必须在变量名前加@</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@v</span> <span class="operator">=</span> <span class="number">333</span>;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test(id) <span class="keyword">values</span>(<span class="variable">@v</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(id) <span class="keyword">into</span> s <span class="keyword">from</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>调用:</p><p><code>call sp3_test(1, @res1); //</code></p><p>获取调用后的结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select @res1; //</span><br><span class="line">+-------+</span><br><span class="line">| @res1 |</span><br><span class="line">+-------+</span><br><span class="line">|   212 |</span><br><span class="line">+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>结果不是111，因为表中之前已存的最大数是212。</p><p><img src="https://images.gitee.com/uploads/images/2018/1110/231522_8e8e2215_1120068.png" alt="test表" title="test表.png"></p><p><code>Call sp3_test(3, @res2); //</code></p><p>获取存储过程返回值:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@res2</span>; <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@res2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">333</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>e.g.5(同时作输入输出参数的存储过程)：</p><p><code>drop procedure if exists sp4_test //</code></p><p>创建:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> sp4_test(<span class="keyword">inout</span> s <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">if s <span class="operator">=</span> <span class="number">100</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@v</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@v</span> <span class="operator">=</span> <span class="number">999</span>;</span><br><span class="line"><span class="keyword">end</span> if;  <span class="comment">/* 必须加分号 */</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@v</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>调用:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- #先设定变量：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">100</span>; <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">Set</span> <span class="variable">@x2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">call</span> sp4_test(<span class="variable">@x</span>); <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><p><img src="https://images.gitee.com/uploads/images/2018/1110/231815_f7b44a23_1120068.png" alt="输入图片说明" title="屏幕截图.png"></p><p><img src="https://images.gitee.com/uploads/images/2018/1110/231835_2500e1cd_1120068.png" alt="输入图片说明" title="屏幕截图.png"></p>]]></content>
    
    
    <summary type="html">存储过程</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="mysql" scheme="http://lomo.space/tags/mysql/"/>
    
    <category term="sql" scheme="http://lomo.space/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>rxjs notes</title>
    <link href="http://lomo.space/2018/09/05/rxjs-notes/"/>
    <id>http://lomo.space/2018/09/05/rxjs-notes/</id>
    <published>2018-09-05T09:32:02.000Z</published>
    <updated>2022-01-14T11:40:22.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="rxjs"><a href="#rxjs" class="headerlink" title="rxjs"></a>rxjs</h3><h4 id="什么事RxJS"><a href="#什么事RxJS" class="headerlink" title="什么事RxJS"></a>什么事RxJS</h4><p>RXJS 是 ReactiveX编程理念&#x2F;思想的 JavaScript实现版本. 其它语言里, 如 Java 有对应的 RxJava[<a href="https://github.com/ReactiveX/RxJava]">https://github.com/ReactiveX/RxJava]</a></p><blockquote><p>ReactiveX是一种针对异步数据流的编程; ReactiveX 是由微软xx架构师创造.</p></blockquote><p>ReactiveX 参考: <a href="http://reactivex.io/intro.html">http://reactivex.io/intro.html</a></p><h4 id="RxJS主要成员-核心概念"><a href="#RxJS主要成员-核心概念" class="headerlink" title="RxJS主要成员(核心概念)"></a>RxJS主要成员(核心概念)</h4><ul><li><p><code>Observable</code></p><blockquote><p>数据生产、传播</p></blockquote></li><li><p><code>Observer</code></p><blockquote><p>数据消费</p></blockquote></li><li><p><code>Subscriber</code></p><blockquote><p>连接 Observable 和 Observer</p></blockquote></li><li><p><code>Operator</code></p><blockquote><p>数据流、传播途中对数据值进行操作&#x2F;转换的操作符</p></blockquote></li><li><p><code>Subject</code></p><blockquote><p>包含 Observable 和 Observer</p></blockquote></li></ul><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> rxjs_exercise</span><br><span class="line"><span class="built_in">cd</span> rxjs_exercise</span><br><span class="line"></span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line"><span class="comment"># or -g</span></span><br><span class="line">npm install --save-dev ts-node</span><br><span class="line"><span class="comment"># must</span></span><br><span class="line">npm install rxjs --save</span><br></pre></td></tr></table></figure><h5 id="Observable-创建"><a href="#Observable-创建" class="headerlink" title="Observable 创建"></a>Observable 创建</h5><p>e.g. 1 【from】</p><p>app.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span>, &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/observable/from&#x27;</span>;  # 操作符 <span class="keyword">from</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> persons = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Dave&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span>, <span class="attr">salary</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Nick&#x27;</span>, <span class="attr">age</span>: <span class="number">37</span>, <span class="attr">salary</span>: <span class="number">32000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Howie&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span>, <span class="attr">salary</span>: <span class="number">26000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Brian&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span>, <span class="attr">salary</span>: <span class="number">30000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Kevin&#x27;</span>, <span class="attr">age</span>: <span class="number">47</span>, <span class="attr">salary</span>: <span class="number">24000</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Observable</span>.<span class="title function_">from</span>(persons).<span class="title function_">subscribe</span>(</span><br><span class="line">    <span class="function"><span class="params">person</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(++index, person);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error),</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stream end/// &#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ts-node app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"></span><br><span class="line">1 &#123; name: <span class="string">&#x27;Dave&#x27;</span>, age: 34, salary: 2000 &#125;</span><br><span class="line">2 &#123; name: <span class="string">&#x27;Nick&#x27;</span>, age: 37, salary: 32000 &#125;</span><br><span class="line">3 &#123; name: <span class="string">&#x27;Howie&#x27;</span>, age: 40, salary: 26000 &#125;</span><br><span class="line">4 &#123; name: <span class="string">&#x27;Brian&#x27;</span>, age: 40, salary: 30000 &#125;</span><br><span class="line">5 &#123; name: <span class="string">&#x27;Kevin&#x27;</span>, age: 47, salary: 24000 &#125;</span><br><span class="line">stream end///</span><br></pre></td></tr></table></figure><p><code>subscribe</code>方法里有三个方法参数, <code>from</code> 操作符用来读取 <code>person</code> 对象, <code>subscribe</code>里的方法开始执行时, <code>Observable</code> 才开始想它推送 (person)对象数据.</p><p>e.g. 2 [create]</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generateData 对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> people = [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;David&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">salary</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;Dav&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span>, <span class="attr">salary</span>: <span class="number">12000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;Lomo&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">salary</span>: <span class="number">16000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;Dev&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">salary</span>: <span class="number">10000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;Amy&#x27;</span>, <span class="attr">age</span>: <span class="number">7</span>, <span class="attr">salary</span>: <span class="number">34000</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">create</span>(</span><br><span class="line">        <span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">            people.<span class="title function_">forEach</span>( <span class="function"><span class="params">p</span> =&gt;</span> &#123; </span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;推送第 &#x27;</span> + (++i) + <span class="string">&#x27; 条数据&#x27;</span>);</span><br><span class="line">                observer.<span class="title function_">next</span>(p)</span><br><span class="line">            &#125;);</span><br><span class="line">            observer.<span class="title function_">complete</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">generateData</span>().<span class="title function_">subscribe</span>(</span><br><span class="line">    <span class="function"><span class="params">people</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(people.<span class="property">name</span> + <span class="string">&#x27;--&#x27;</span> + people.<span class="property">age</span> + <span class="string">&#x27;--&#x27;</span> + people.<span class="property">salary</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(error); &#125;,</span><br><span class="line">    <span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;消费完了.&#x27;</span>); &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ts-node create 运行结果如下:</span></span><br><span class="line"></span><br><span class="line">推送第 1 条数据</span><br><span class="line">David--3--2000</span><br><span class="line">推送第 2 条数据</span><br><span class="line">Dav--17--12000</span><br><span class="line">推送第 3 条数据</span><br><span class="line">Lomo--20--16000</span><br><span class="line">推送第 4 条数据</span><br><span class="line">Dev--20--10000</span><br><span class="line">推送第 5 条数据</span><br><span class="line">Amy--7--34000</span><br><span class="line">消费完了.</span><br></pre></td></tr></table></figure><p><code>Observable.create()</code> 方法接受一个 <code>function</code> 方法参数. 通过运行结果发现， 当订阅者每消费一条数据, <code>observable</code> 就会推送一条数据, 并逐次推送对象里的数据给消费者, 直到 <code>complete()</code>, 从而形成 <code>流式</code>.</p><p>尝试将 <code>.subscriobe()</code> 方法里的三个方法注释掉,</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">generateData</span>().<span class="title function_">subscribe</span>(</span><br><span class="line">    <span class="comment">// people =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(people.name + &#x27;--&#x27; + people.age + &#x27;--&#x27; + people.salary);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// error =&gt; &#123; console.log(error); &#125;,</span></span><br><span class="line">    <span class="comment">// () =&gt; &#123; console.log(&#x27;消费完了.&#x27;); &#125;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">推送第 1 条数据</span><br><span class="line">推送第 2 条数据</span><br><span class="line">推送第 3 条数据</span><br><span class="line">推送第 4 条数据</span><br><span class="line">推送第 5 条数据</span><br></pre></td></tr></table></figure><p>整个数据流的传递 只有 <code>Observable</code> 在被订阅(<code>.subscribe()</code>)消费时才会去推送数据流(不管订阅者是否处理消费, 只要订阅了 就给你推送).</p><h5 id="Operator-操作符"><a href="#Operator-操作符" class="headerlink" title="Operator 操作符"></a>Operator 操作符</h5><p>常见操作符: <code>of</code>, <code>map</code>, <code>reduce</code>, <code>filter</code>, <code>take</code>, <code>first</code>, <code>Timer</code>, <code>Interval</code>.</p><p>操作符本质上是一个 <code>function</code>, 用来处理、加工 <code>Observable</code> 中传递的数据流里的数据. 这个 操作符 <code>function()</code> 输入、输出(返回)均为<code>Observable</code>类型</p><p>e.g.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/observable/from&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/map&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/reduce&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> persons = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;David&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">salary</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Dav&#x27;</span>, <span class="attr">age</span>: <span class="number">17</span>, <span class="attr">salary</span>: <span class="number">12000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Lomo&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">salary</span>: <span class="number">16000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Dev&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">salary</span>: <span class="number">10000</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Amy&#x27;</span>, <span class="attr">age</span>: <span class="number">7</span>, <span class="attr">salary</span>: <span class="number">34000</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// reduce 里的0 是设定的一个默认返回值, 可以不给.</span></span><br><span class="line"><span class="title class_">Observable</span>.<span class="title function_">from</span>(persons).<span class="title function_">map</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">salary</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, current</span>) =&gt;</span> total + current, <span class="number">0</span>).<span class="title function_">subscribe</span>(</span><br><span class="line">    <span class="function"><span class="params">total</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`total salary is: <span class="subst">$&#123;total&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// console.log(persons);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err),</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finished.&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ts-node operator</span></span><br><span class="line">total salary is: 74000</span><br><span class="line">finished.</span><br></pre></td></tr></table></figure><blockquote><p>通过 map  方法获取数据流的所有salary, 并交给reduce 计算获取总和</p></blockquote><p>参考:</p><p><a href="https://www.jianshu.com/p/d8cb71554008">https://www.jianshu.com/p/d8cb71554008</a></p><p><a href="https://segmentfault.com/a/1190000008834251">https://segmentfault.com/a/1190000008834251</a></p><h5 id="catch-错误处理"><a href="#catch-错误处理" class="headerlink" title="catch() 错误处理"></a>catch() 错误处理</h5><p>错误处理需要在 数据流 到达 <code>Observer</code> 之前拦截处理。</p>]]></content>
    
    
    <summary type="html">RxJS 笔记📒</summary>
    
    
    
    <category term="program" scheme="http://lomo.space/categories/program/"/>
    
    
    <category term="js" scheme="http://lomo.space/tags/js/"/>
    
    <category term="rxjs" scheme="http://lomo.space/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>react/antd notes</title>
    <link href="http://lomo.space/2018/09/01/react-antd-notes/"/>
    <id>http://lomo.space/2018/09/01/react-antd-notes/</id>
    <published>2018-09-01T14:33:15.000Z</published>
    <updated>2022-01-14T11:40:22.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ant-Design-Pro使用小记"><a href="#Ant-Design-Pro使用小记" class="headerlink" title="Ant Design Pro使用小记"></a>Ant Design Pro使用小记</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>从Angular变更到React技术栈…</p></blockquote><p>吾队, 统一使用<code>React</code>了, 别问为什么, 我想了好几天也没搞明白.</p><p>写吧写吧.</p><p>如今, 就一个人好好搬砖吧.</p><p>本次项目直接使用<code>antd pro</code>, 阿里的那一套……</p><blockquote><p><a href="https://pro.ant.design/">https://pro.ant.design/</a></p></blockquote><h4 id="初始化工作"><a href="#初始化工作" class="headerlink" title="初始化工作"></a>初始化工作</h4><blockquote><p>由于本次直接使用的是 <code>ali</code> 的antd pro 中台解决方案. 基本相当于二次开发……</p></blockquote><p>安装脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install dva-cli -g</span><br><span class="line">dva -v</span><br><span class="line">dva-cli version 0.9.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">dva new</span><br><span class="line"><span class="comment"># ... ...</span></span><br></pre></td></tr></table></figure><p>本地运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> projectName</span><br><span class="line">npm start</span><br><span class="line"><span class="comment"># http://localhost:8000/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># build prod</span></span><br><span class="line">npm build</span><br></pre></td></tr></table></figure><h4 id="项目目录解析"><a href="#项目目录解析" class="headerlink" title="项目目录解析"></a>项目目录解析</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 未包含隐藏.xx相关配置文件</span></span><br><span class="line">.</span><br><span class="line">├── appveyor.yml</span><br><span class="line">├── jest.config.js</span><br><span class="line">├── mock</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">├── src</span><br><span class="line">└── tests</span><br></pre></td></tr></table></figure><ol><li><p><code>mock</code> 目录下都是mock数据用的文件</p></li><li><p><code>public</code> 目录下存放静态资源文件</p></li><li><p><code>src</code> 项目的源码</p></li><li><p><code>tests</code> 单元测试代码</p></li></ol><p>关于以 <code>.</code> 开头的隐藏文件说明:</p><ol><li><code>.roadhogrc.mock.js</code> 该文件主要是用来在本地<code>mock</code>数据时 拦截、代理本地接口请求用的. 具体使用, 后续会讲到.</li><li><code>.webpackrc.js</code> webpack打包配置相关设定, 可以看到已经将<code>antd</code>这个库设置为打包进去了, 使用<code>react</code>官方脚手架，创建时 时需要人为配置.</li><li><code>.eslint.js</code>, <code>.babelrc.ks</code> 都是相关配置文件, 暂不需要过度关注和修改.</li></ol><h3 id="src目录说明"><a href="#src目录说明" class="headerlink" title="src目录说明"></a>src目录说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── assets</span><br><span class="line">├── common</span><br><span class="line">├── components</span><br><span class="line">├── e2e</span><br><span class="line">├── index.ejs</span><br><span class="line">├── index.js</span><br><span class="line">├── index.less</span><br><span class="line">├── layouts</span><br><span class="line">├── models</span><br><span class="line">├── polyfill.js</span><br><span class="line">├── rollbar.js</span><br><span class="line">├── router.js</span><br><span class="line">├── routes</span><br><span class="line">├── services</span><br><span class="line">├── theme.js</span><br><span class="line">└── utils</span><br></pre></td></tr></table></figure><ol><li><code>assets</code>文件夹, 静态资源存放</li><li><code>common</code>文件夹, 公共的, 按照ant pro设定就2个文件</li><li><code>components</code>文件夹, <strong>纯</strong>UI组件</li><li><code>e2e</code>, end 2 end 测试</li><li><code>models</code> 文件夹, 存放模型Model(和数据操作密切相关的)文件, 和<code>dva</code>密切关联.</li><li><code>utils</code>, 一些常用函数工具类库</li><li><code>services</code>, 存放一些接口请求相关的封装</li><li><code>routes</code>文件夹, 存放页面相关的route component(不是纯UI组件, 其包含了一些具体的页面操作交互、方法定义、周期钩子函数<code>componentDidMount</code>等).</li><li><code>layouts</code>, 整个页面的布局设定</li><li><code>polyfill.js</code>, 兼容性设置</li><li><code>index.js</code>, 整个应用入口</li><li>其它暂时不用管……</li></ol><h3 id="项目示例"><a href="#项目示例" class="headerlink" title="项目示例"></a>项目示例</h3><p>需求: 需要展示一个 <code>product</code> 列表, 并在左侧导航栏的二级菜单下有一个入口.</p><h4 id="menu配置"><a href="#menu配置" class="headerlink" title="menu配置"></a>menu配置</h4><ol><li>菜单配置, 添加入口, 修改<code>src/common/menu.js</code>文件.<br>找到 <code>path: &#39;management&#39;</code> 关键字, 在 <code>children</code>下按照同样的语法格式添加即可. 该语法和 <code>Angular</code> 中的路由配置类似.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path</span>: <span class="string">&#x27;management&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;产品线&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;product_line&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><ol start="2"><li>添加路由配置, 修改<code>src/common/router.js</code>文件. 在 <code>routerConfig</code> 对象找个合适的位置按照同样的语法添加即可.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;/management/product_line&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">component</span>: <span class="title function_">dynamicWrapper</span>(app, [<span class="string">&#x27;productline&#x27;</span>], <span class="function">() =&gt;</span></span><br><span class="line">        <span class="title function_">import</span>(<span class="string">&#x27;../routes/Management/ProductLine/ProductLine&#x27;</span>)</span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>注意, <code>dynamicWrapper</code> 方法的第二个数组参数, 通常用来设置该路由组件(即ProductLine)所对应的Model.</p></blockquote><h4 id="view层router-component组件"><a href="#view层router-component组件" class="headerlink" title="view层router component组件"></a>view层router component组件</h4><ol start="3"><li>添加该<code>View</code>层的路由组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面视图 --&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span>, <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;dva&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Card</span>, <span class="title class_">Button</span>, <span class="title class_">Form</span>, <span class="title class_">Table</span>, <span class="title class_">Popconfirm</span>, <span class="title class_">Divider</span>, message &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ProductLineModal</span> <span class="keyword">from</span> <span class="string">&#x27;./ProductLineModal&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PageHeaderLayout</span> <span class="keyword">from</span> <span class="string">&#x27;../../../layouts/PageHeaderLayout&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./ProductLine.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">connect</span>(<span class="function">(<span class="params">&#123; productline, loading &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  productline,</span><br><span class="line">  <span class="attr">loading</span>: loading.<span class="property">effects</span>[<span class="string">&#x27;productline/fetch&#x27;</span>],</span><br><span class="line">&#125;))</span><br><span class="line">@<span class="title class_">Form</span>.<span class="title function_">create</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ProductLine</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">modalVisible</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">currentRow</span>: &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;productline/fetch&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleModalVisible = <span class="function">(<span class="params">flag, row = &#123;&#125;, mode = <span class="string">&#x27;create&#x27;</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">modalVisible</span>: !!flag,</span><br><span class="line">      mode,</span><br><span class="line">      <span class="attr">currentRow</span>: row,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  confirmDelete = <span class="function"><span class="params">fields</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;productline/remove&#x27;</span>,</span><br><span class="line">      <span class="attr">payload</span>: &#123;</span><br><span class="line">        <span class="attr">deleteData</span>: fields,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除的内容: &#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fields);</span><br><span class="line"></span><br><span class="line">    message.<span class="title function_">success</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">modalVisible</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  handleUpdate = <span class="function"><span class="params">fields</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;productline/update&#x27;</span>,</span><br><span class="line">      <span class="attr">payload</span>: &#123;</span><br><span class="line">        <span class="attr">postData</span>: fields,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新的内容: &#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fields);</span><br><span class="line">    <span class="comment">// console.log( fields.desc); // undefined</span></span><br><span class="line"></span><br><span class="line">    message.<span class="title function_">success</span>(<span class="string">&#x27;更新成功&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">modalVisible</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleAdd = <span class="function"><span class="params">fields</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;productline/add&#x27;</span>,</span><br><span class="line">      <span class="attr">payload</span>: &#123;</span><br><span class="line">        <span class="attr">postData</span>: fields,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新增的内容: &#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fields);</span><br><span class="line">    <span class="comment">// console.log( fields.desc); // undefined</span></span><br><span class="line"></span><br><span class="line">    message.<span class="title function_">success</span>(<span class="string">&#x27;添加成功&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">modalVisible</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="attr">productline</span>: &#123;</span><br><span class="line">        <span class="attr">list</span>: &#123; <span class="attr">list</span>: dataSource &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      loading,</span><br><span class="line">    &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; modalVisible, mode, currentRow &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> columns = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">        <span class="attr">dataIndex</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;所属 PA&#x27;</span>,</span><br><span class="line">        <span class="attr">dataIndex</span>: <span class="string">&#x27;pa&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">        <span class="attr">dataIndex</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;操作&#x27;</span>,</span><br><span class="line">        <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        <span class="attr">render</span>: <span class="function">(<span class="params">text, record</span>) =&gt;</span> (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">icon</span>=<span class="string">&quot;edit&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.handleModalVisible(true, record, &#x27;update&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">            编辑</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Divider</span> <span class="attr">type</span>=<span class="string">&quot;vertical&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Popconfirm</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">title</span>=<span class="string">&quot;确认删除?&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">okText</span>=<span class="string">&quot;确认&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">cancelText</span>=<span class="string">&quot;取消&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onConfirm</span>=<span class="string">&#123;()</span> =&gt;</span> this.confirmDelete(record)&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;delete&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              删除</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Popconfirm</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> parentMethods = &#123;</span><br><span class="line">      <span class="attr">handleAdd</span>: <span class="variable language_">this</span>.<span class="property">handleAdd</span>,</span><br><span class="line">      <span class="attr">handleUpdate</span>: <span class="variable language_">this</span>.<span class="property">handleUpdate</span>,</span><br><span class="line">      <span class="attr">handleModalVisible</span>: <span class="variable language_">this</span>.<span class="property">handleModalVisible</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> parentData = &#123;</span><br><span class="line">      modalVisible,</span><br><span class="line">      mode,</span><br><span class="line">      <span class="attr">values</span>: currentRow,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">PageHeaderLayout</span> <span class="attr">title</span>=<span class="string">&quot;产品线&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Card</span> <span class="attr">bordered</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.tableList&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.tableListOperator&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Button</span> <span class="attr">icon</span>=<span class="string">&quot;plus&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.handleModalVisible(true)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                新建</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Table</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">rowKey</span>=<span class="string">&quot;id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">loading</span>=<span class="string">&#123;loading&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">dataSource</span>=<span class="string">&#123;dataSource&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">columns</span>=<span class="string">&#123;columns&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">bordered</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ProductLineModal</span> &#123;<span class="attr">...parentMethods</span>&#125; &#123;<span class="attr">...parentData</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">PageHeaderLayout</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>模态框的简单封装: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 上面👆那个页面用到的模态框封装 --&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">PureComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Input</span>, <span class="title class_">Select</span>, <span class="title class_">Modal</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FormItem</span> = <span class="title class_">Form</span>.<span class="property">Item</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">TextArea</span> &#125; = <span class="title class_">Input</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Option</span> &#125; = <span class="title class_">Select</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> areas = [<span class="string">&#x27;社区&#x27;</span>, <span class="string">&#x27;商业&#x27;</span>, <span class="string">&#x27;大学&#x27;</span>, <span class="string">&#x27;智能工具&#x27;</span>, <span class="string">&#x27;基础架构&#x27;</span>];</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Form</span>.<span class="title function_">create</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ProductLineModal</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prevProps.<span class="property">modalVisible</span> === <span class="literal">false</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">modalVisible</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        form,</span><br><span class="line">        <span class="attr">values</span>: &#123; name, pa, description &#125;,</span><br><span class="line">      &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">      form.<span class="title function_">setFieldsValue</span>(&#123;</span><br><span class="line">        name,</span><br><span class="line">        pa,</span><br><span class="line">        description,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  okHandle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">mode</span>); <span class="comment">// &#x27;create&#x27;, &#x27;update&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> &#123; form, handleAdd, handleUpdate &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    form.<span class="title function_">validateFields</span>(<span class="function">(<span class="params">err, fieldsValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span>;</span><br><span class="line">      form.<span class="title function_">resetFields</span>();</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">mode</span> === <span class="string">&#x27;update&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">handleUpdate</span>(fieldsValue);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">handleAdd</span>(fieldsValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; form, modalVisible, handleModalVisible, mode &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">const</span> title = <span class="string">`<span class="subst">$&#123;mode === <span class="string">&#x27;create&#x27;</span> ? <span class="string">&#x27;新建&#x27;</span> : <span class="string">&#x27;编辑&#x27;</span>&#125;</span>产品线`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Modal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&#123;title&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">visible</span>=<span class="string">&#123;modalVisible&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onOk</span>=<span class="string">&#123;this.okHandle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onCancel</span>=<span class="string">&#123;()</span> =&gt;</span> handleModalVisible()&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">labelCol</span>=<span class="string">&#123;&#123;</span> <span class="attr">span:</span> <span class="attr">5</span> &#125;&#125; <span class="attr">wrapperCol</span>=<span class="string">&#123;&#123;</span> <span class="attr">span:</span> <span class="attr">15</span> &#125;&#125; <span class="attr">label</span>=<span class="string">&quot;产品线名称&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;form.getFieldDecorator(&#x27;name&#x27;, &#123;</span></span><br><span class="line"><span class="language-xml">            rules: [&#123; required: true, message: &#x27;请输入产品线名称&#x27; &#125;],</span></span><br><span class="line"><span class="language-xml">          &#125;)(<span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入产品线名称&quot;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">labelCol</span>=<span class="string">&#123;&#123;</span> <span class="attr">span:</span> <span class="attr">5</span> &#125;&#125; <span class="attr">wrapperCol</span>=<span class="string">&#123;&#123;</span> <span class="attr">span:</span> <span class="attr">15</span> &#125;&#125; <span class="attr">label</span>=<span class="string">&quot;所属 PA&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;form.getFieldDecorator(&#x27;pa&#x27;, &#123;</span></span><br><span class="line"><span class="language-xml">            rules: [&#123; required: true, message: &#x27;请选择所属 PA&#x27; &#125;],</span></span><br><span class="line"><span class="language-xml">          &#125;)(</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Select</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择所属 PA&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;areas.map(area =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                return (</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Option</span> <span class="attr">key</span>=<span class="string">&#123;area&#125;</span> <span class="attr">value</span>=<span class="string">&#123;area&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;area&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                );</span></span><br><span class="line"><span class="language-xml">              &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          )&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">labelCol</span>=<span class="string">&#123;&#123;</span> <span class="attr">span:</span> <span class="attr">5</span> &#125;&#125; <span class="attr">wrapperCol</span>=<span class="string">&#123;&#123;</span> <span class="attr">span:</span> <span class="attr">15</span> &#125;&#125; <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;form.getFieldDecorator(&#x27;description&#x27;, &#123;</span></span><br><span class="line"><span class="language-xml">            rules: [&#123; required: true, message: &#x27;请输入描述&#x27; &#125;],</span></span><br><span class="line"><span class="language-xml">          &#125;)(<span class="tag">&lt;<span class="name">TextArea</span> <span class="attr">rows</span>=<span class="string">&#123;3&#125;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="view层router-component组件对应的model"><a href="#view层router-component组件对应的model" class="headerlink" title="view层router component组件对应的model"></a>view层router component组件对应的model</h4><ol start="4"><li>通信</li></ol><p>针对上述3中的<code>route component</code>组件, 发现其中有几个方法以及与接口<code>API</code>交互的方法.</p><p>第一个: 进入当前页面路由后, 初始化加载的数据. 在 <code>ProductLine</code> 类中可以看到:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;productline/fetch&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这是 <code>React</code> 提供的生命周期钩子函数, <code>render</code> 渲染到 <code>DOM</code> 时就会自动触发该钩子函数, 从而发起请求<code>fetch</code>; 具体写法: <code>model的namespace/方法名</code>.</p></blockquote><p>在类中调用该接口请求, 另一个必须的依赖就是 <code>dva</code> (阿里基于redux + react-router + redux-saga 等库的轻量封装). 使用 <code>connect</code> 连接到该组件的 <code>model</code></p><p>该组件的model如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  queryProductLine,</span><br><span class="line">  addNewProducLine,</span><br><span class="line">  updateProductLine,</span><br><span class="line">  removeProductLine,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../services/productline&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&#x27;productline&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">list</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">effects</span>: &#123;</span><br><span class="line">    *<span class="title function_">fetch</span>(<span class="params">_, &#123; call, put &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">yield</span> <span class="title function_">call</span>(queryProductLine);</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;saveProductLine&#x27;</span>,</span><br><span class="line">        <span class="attr">payload</span>: response,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 添加新的产品线</span></span><br><span class="line">    *<span class="title function_">add</span>(<span class="params">&#123; payload, callback &#125;, &#123; call, put &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">yield</span> <span class="title function_">call</span>(addNewProducLine, payload);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收到的payload:&#x27;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(payload);</span><br><span class="line">      <span class="comment">// 请求发出后，暂不更新数据，模拟接口返回的数据不是个list 会导致view重新渲染为空白列表 ~~</span></span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;saveProductLine&#x27;</span>,</span><br><span class="line">        <span class="attr">payload</span>: response,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (callback) <span class="title function_">callback</span>();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改某条产品线的信息</span></span><br><span class="line">    *<span class="title function_">update</span>(<span class="params">&#123; payload, callback &#125;, &#123; call, put &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">yield</span> <span class="title function_">call</span>(updateProductLine, payload);</span><br><span class="line">      <span class="comment">// console.log(&#x27;接收要修改的的payload:&#x27;);</span></span><br><span class="line">      <span class="comment">// console.log(payload);</span></span><br><span class="line">      <span class="comment">// 请求发出后，暂不更新数据，模拟接口返回的数据不是个list 会导致view重新渲染为空白列表 ~~</span></span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;saveProductLine&#x27;</span>,</span><br><span class="line">        <span class="attr">payload</span>: response,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (callback) <span class="title function_">callback</span>();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除某条产品线</span></span><br><span class="line">    *<span class="title function_">remove</span>(<span class="params">&#123; payload, callback &#125;, &#123; call, put &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">yield</span> <span class="title function_">call</span>(removeProductLine, payload);</span><br><span class="line">      <span class="comment">// console.log(&#x27;接收要删除的的payload:&#x27;);</span></span><br><span class="line">      <span class="comment">// console.log(payload);</span></span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;saveProductLine&#x27;</span>,</span><br><span class="line">        <span class="attr">payload</span>: response,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (callback) <span class="title function_">callback</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">saveProductLine</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">list</span>: action.<span class="property">payload</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到 <code>view</code> 层的 <code>router component</code> 组件调用了其对用的 <code>model</code> 里封装的方法. 但是实际的接口地址在哪里呢? 在下面👇</p></blockquote><h4 id="接口services层封装"><a href="#接口services层封装" class="headerlink" title="接口services层封装"></a>接口services层封装</h4><blockquote><p>在上面的第4步中可以看到该 <code>model</code> 从 <code>services</code> 文件夹下的 <code>productline</code> 中导入了几个方法.</p></blockquote><p>接口 <code>service</code> 如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryProductLine</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&#x27;/api/productline&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加新product line</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">addNewProducLine</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&#x27;/api/productlinepost&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: &#123;</span><br><span class="line">      ...params,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改product line 信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateProductLine</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&#x27;api/productlineput&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: &#123;</span><br><span class="line">      ...params,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除product line</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">removeProductLine</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&#x27;api/productlinedelete&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: &#123;</span><br><span class="line">      ...params,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里配置的URL 都是本地mock的, 默认是被本地mock接口拦截的.</p></blockquote><p>至此, 整个数据流向和API请求使用, 按照上面的步骤 一步步下来 就很清晰了.</p><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><blockquote><p>Ant Design Pro 内置使用的是 <code>dva</code>.</p></blockquote><p>对照此图即可 明了.</p><blockquote><p>应用的数据流向(和API交互过程)</p></blockquote><div align="center">  <img src="https://images.gitee.com/uploads/images/2018/0902/170752_1136de9e_1120068.png"></div><h4 id="数据流向"><a href="#数据流向" class="headerlink" title="数据流向"></a>数据流向</h4><p>Action:<br>    Action是把数据从应用(如：用户输入、点击事件触发的数据、或是从接口请求获取的数据) 传递到store的一个载体。</p><pre><code>Action本质上是JS 普通对象。约定：Action内必须有一个字符串类的type 字段，用来表示将要执行的动作。</code></pre><p>  一般&#x2F;多数情况下，type会被定义成字符串常量；</p><p>Reducer:<br>    指定 应用状态的变化如何响应actions并发送到store（actions只描述有事情发生这一事实，没有描述应用如何更新state）；</p><pre><code>Reducer是个纯函数，主要作用：接受旧的state和action，返回新的state。Redux应用中, 所有的state都被保存在一个单一对象中。所以，reducer函数中 只是单纯进行计算(返回新的state)，没有API请求、没有变量修改、</code></pre><p>Store:<br>Store就是把action和reducer联系到一起的对象。</p><h4 id="React简单说明"><a href="#React简单说明" class="headerlink" title="React简单说明"></a>React简单说明</h4><blockquote><p>React 并不是Web应用的完整解决方案, 只是DOM的抽象层.</p></blockquote><blockquote><p>React中值传递 都是向下传递的、单向的; 只能从父级 流向 子级.</p></blockquote><blockquote><p>组件声明规范: 无论是函数方式还是ES6中的class方式声明组件, 组件的命名规范: 首字母必须大写!</p></blockquote><h4 id="dva-说明"><a href="#dva-说明" class="headerlink" title="dva 说明"></a>dva 说明</h4><p><code>dva</code> 是alibaba基于 <code>redux</code> + <code>react-router</code> + <code>redux-saga</code> 的一层轻量封装.</p><h4 id="关于Redux"><a href="#关于Redux" class="headerlink" title="关于Redux"></a>关于Redux</h4><blockquote><p>Redux和react没有 什么直接关系.</p></blockquote><blockquote><p>Redux不仅支持react, 也支持angular、ember、jQuery、纯JS.</p></blockquote><h4 id="关于Andt-Pro"><a href="#关于Andt-Pro" class="headerlink" title="关于Andt Pro"></a>关于Andt Pro</h4><p>Ant Design of React 只是一个React相关的组件库。类似angular相关的UI库 ng-zorro.  而 Ant Design Pro相当于一个更上层的应用&#x2F;模板，协助快速开发出应用。</p><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><h4 id="关于-dva-使用"><a href="#关于-dva-使用" class="headerlink" title="关于 dva 使用:"></a>关于 <code>dva</code> 使用:</h4><p>官方:<br><a href="https://dvajs.com/guide/">https://dvajs.com/guide/</a></p><p>练习:<br><a href="https://gitee.com/lomospace/dva-sample">https://gitee.com/lomospace/dva-sample</a></p><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><blockquote><p>Google即可.</p></blockquote><h4 id="Ant-Design-Pro"><a href="#Ant-Design-Pro" class="headerlink" title="Ant Design Pro"></a>Ant Design Pro</h4><p>官方:<br><a href="https://pro.ant.design/">https://pro.ant.design/</a></p><p>练习:<br><a href="https://gitee.com/lomospace/antPro">https://gitee.com/lomospace/antPro</a></p><h4 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h4><p>Doc(中文)<br><a href="https://cn.redux.js.org/">https://cn.redux.js.org/</a></p><p>视频(英文)<br><a href="https://egghead.io/lessons/">https://egghead.io/lessons/</a></p><h4 id="React-脚手架"><a href="#React-脚手架" class="headerlink" title="React 脚手架"></a>React 脚手架</h4><p>官方:<br><a href="https://github.com/facebook/create-react-app">https://github.com/facebook/create-react-app</a></p><p>dva系:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">npm install dva-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># create</span></span><br><span class="line">dva new projectName</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> projetName</span><br><span class="line"></span><br><span class="line"><span class="comment"># local run</span></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p><a href="https://dvajs.com/guide/getting-started.html#%E5%AE%89%E8%A3%85-dva-cli">https://dvajs.com/guide/getting-started.html#%E5%AE%89%E8%A3%85-dva-cli</a></p>]]></content>
    
    
    <summary type="html">react/antd pro使用小记</summary>
    
    
    
    <category term="program" scheme="http://lomo.space/categories/program/"/>
    
    
    <category term="js" scheme="http://lomo.space/tags/js/"/>
    
    <category term="react" scheme="http://lomo.space/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>python-itertools</title>
    <link href="http://lomo.space/2018/07/17/python-itertools/"/>
    <id>http://lomo.space/2018/07/17/python-itertools/</id>
    <published>2018-07-17T13:56:29.000Z</published>
    <updated>2022-01-14T11:40:22.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-内置模块之-itertools"><a href="#Python-内置模块之-itertools" class="headerlink" title="Python 内置模块之 itertools"></a>Python 内置模块之 itertools</h2><h3 id="组合函数-combinations"><a href="#组合函数-combinations" class="headerlink" title="组合函数 combinations"></a>组合函数 combinations</h3><blockquote><p>combinations</p></blockquote><p>示例: 给定一个数组 [‘a’, ‘b’, ‘c’, ‘d’], 求该数组的所有子串集合</p><p>转为求字符串 ‘abcd’ 子串 (答案：a, b, c, d, ab, ac, ad, bc, bd, abc, abd ….. abcd 共15个).</p><p>借助 <code>combinations</code> 函数实现随机<strong>不重复</strong>组合.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">string = <span class="string">&#x27;&#x27;</span>.join(arr)  <span class="comment"># &#x27;abcd&#x27;</span></span><br><span class="line">substring = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">    <span class="comment"># print(&#x27;i = &#123;0&#125;&#x27;.format(i))  # 0, 1, 2, 3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(combinations(string, i+<span class="number">1</span>)))  <span class="comment"># 输出见下面</span></span><br><span class="line">    substring.extend(<span class="built_in">list</span>(combinations(string, i+<span class="number">1</span>)))</span><br><span class="line">    substring = [<span class="string">&#x27;&#x27;</span>.join(s) <span class="keyword">for</span> s <span class="keyword">in</span> substring]</span><br><span class="line">    <span class="built_in">print</span>(substring)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>for</code> 循环中 <code>print</code> 输出是 list(tuple) 类型:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">&#x27;a&#x27;</span>,), (<span class="string">&#x27;b&#x27;</span>,), (<span class="string">&#x27;c&#x27;</span>,), (<span class="string">&#x27;d&#x27;</span>,)]</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)]</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)]</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)]</span><br></pre></td></tr></table></figure><blockquote><p>combinations(str, n), 该方法即为 取 str 中的n个字符组合.</p></blockquote><p><code>combinations(string, i+1)</code> 的返回值为 <code>combinations object</code>:<br>形如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;itertools.combinations object at 0x10ca179b0&gt;</span><br><span class="line">&lt;itertools.combinations object at 0x10ca179b0&gt;</span><br><span class="line">&lt;itertools.combinations object at 0x10ca8d9b0&gt;</span><br><span class="line">&lt;itertools.combinations object at 0x10ca8d9b0&gt;</span><br></pre></td></tr></table></figure><p>所以, 该方法主要是用来组合!!!</p><h3 id="排列函数-permutations"><a href="#排列函数-permutations" class="headerlink" title="排列函数 permutations"></a>排列函数 permutations</h3><blockquote><p>permutations</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; list(permutations([1,3,5], None))</span><br><span class="line">[(1, 3, 5), (1, 5, 3), (3, 1, 5), (3, 5, 1), (5, 1, 3), (5, 3, 1)]</span><br></pre></td></tr></table></figure><p>继续使用上面的例子.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">res_per = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">    <span class="comment"># 这里不能使用 append! 🙂</span></span><br><span class="line">    res_per.extend(<span class="built_in">list</span>(permutations(string, i + <span class="number">1</span>)))</span><br><span class="line">    res_per = [<span class="string">&#x27;&#x27;</span>.join(s) <span class="keyword">for</span> s <span class="keyword">in</span> res_per]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res_per)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(res_per))  <span class="comment"># 64</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>res_per</code> 的输出结果为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>, <span class="string">&#x27;ad&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>, <span class="string">&#x27;bd&#x27;</span>, <span class="string">&#x27;ca&#x27;</span>, <span class="string">&#x27;cb&#x27;</span>, <span class="string">&#x27;cd&#x27;</span>, <span class="string">&#x27;da&#x27;</span>, <span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;dc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abd&#x27;</span>, <span class="string">&#x27;acb&#x27;</span>, <span class="string">&#x27;acd&#x27;</span>, <span class="string">&#x27;adb&#x27;</span>, <span class="string">&#x27;adc&#x27;</span>, <span class="string">&#x27;bac&#x27;</span>, <span class="string">&#x27;bad&#x27;</span>, <span class="string">&#x27;bca&#x27;</span>, <span class="string">&#x27;bcd&#x27;</span>, <span class="string">&#x27;bda&#x27;</span>, <span class="string">&#x27;bdc&#x27;</span>, <span class="string">&#x27;cab&#x27;</span>, <span class="string">&#x27;cad&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;cbd&#x27;</span>, <span class="string">&#x27;cda&#x27;</span>, <span class="string">&#x27;cdb&#x27;</span>, <span class="string">&#x27;dab&#x27;</span>, <span class="string">&#x27;dac&#x27;</span>, <span class="string">&#x27;dba&#x27;</span>, <span class="string">&#x27;dbc&#x27;</span>, <span class="string">&#x27;dca&#x27;</span>, <span class="string">&#x27;dcb&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;abdc&#x27;</span>, <span class="string">&#x27;acbd&#x27;</span>, <span class="string">&#x27;acdb&#x27;</span>, <span class="string">&#x27;adbc&#x27;</span>, <span class="string">&#x27;adcb&#x27;</span>, <span class="string">&#x27;bacd&#x27;</span>, <span class="string">&#x27;badc&#x27;</span>, <span class="string">&#x27;bcad&#x27;</span>, <span class="string">&#x27;bcda&#x27;</span>, <span class="string">&#x27;bdac&#x27;</span>, <span class="string">&#x27;bdca&#x27;</span>, <span class="string">&#x27;cabd&#x27;</span>, <span class="string">&#x27;cadb&#x27;</span>, <span class="string">&#x27;cbad&#x27;</span>, <span class="string">&#x27;cbda&#x27;</span>, <span class="string">&#x27;cdab&#x27;</span>, <span class="string">&#x27;cdba&#x27;</span>, <span class="string">&#x27;dabc&#x27;</span>, <span class="string">&#x27;dacb&#x27;</span>, <span class="string">&#x27;dbac&#x27;</span>, <span class="string">&#x27;dbca&#x27;</span>, <span class="string">&#x27;dcab&#x27;</span>, <span class="string">&#x27;dcba&#x27;</span>]</span><br></pre></td></tr></table></figure><p>共 64 个组合.</p><p>该方法主要用来排列!!!</p><h3 id="TODO-源码阅读"><a href="#TODO-源码阅读" class="headerlink" title="TODO 源码阅读"></a>TODO 源码阅读</h3><p>参考实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">combinations</span>(<span class="params">iterable, r</span>):</span><br><span class="line">    <span class="comment"># combinations(&#x27;ABCD&#x27;, 2) --&gt; AB AC AD BC BD CD</span></span><br><span class="line">    <span class="comment"># combinations(range(4), 3) --&gt; 012 013 023 123</span></span><br><span class="line">    pool = <span class="built_in">tuple</span>(iterable)</span><br><span class="line">    n = <span class="built_in">len</span>(pool)</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(r))</span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">tuple</span>(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != i + n - r:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, r):</span><br><span class="line">            indices[j] = indices[j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">tuple</span>(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><blockquote><p>解析 …</p></blockquote><p>python 3.7</p><p><a href="https://docs.python.org/3.7/library/itertools.html">https://docs.python.org/3.7/library/itertools.html</a></p><p>python 2.7</p><p><a href="https://docs.python.org/2/library/itertools.html">https://docs.python.org/2/library/itertools.html</a></p><h3 id="附-append-与-extend-区别"><a href="#附-append-与-extend-区别" class="headerlink" title="附 append 与 extend 区别"></a>附 append 与 extend 区别</h3><p>这2个方法都是用来向数组&#x2F;list 中增加数据的。</p><p><code>.append(x)</code> 接受的参数: 可以是一个数字或字符串，也可以是一个数组 list 或 tuple 或 dict, 简言之，.append()可接受任何类型的数据塞进已有的 list 中.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; test3</span><br><span class="line">[1, 3, 5]</span><br><span class="line">&gt;&gt;&gt; test3.append(&#123;&#x27;name&#x27;: &#x27;lomo123&#x27;&#125;)</span><br><span class="line">&gt;&gt;&gt; test3</span><br><span class="line">[1, 3, 5, &#123;&#x27;name&#x27;: &#x27;lomo123&#x27;&#125;]</span><br></pre></td></tr></table></figure><p>注意：如果 append 传入的参数 x 是 数组 list 类型，则该 list 维数会在原来的基础上+1，如 ori &#x3D; [], ori.append([1,2,3]), 则 ori &#x3D; [[1,2,3]] 变为二维数组了，使用 extend 则不会。</p><p><code>.extend(x)</code> 接收的参数必须是一个str类型的字符串或 list 数组类型 或 tuple 类型.</p><p>如，e.g.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">test2 = [1,3,5]</span><br><span class="line">test2.extend(1)  # 会报错</span><br><span class="line">test2.extend(&#x27;a&#x27;)  # [1, 3, 5, &#x27;a&#x27;]</span><br><span class="line"></span><br><span class="line"># 传字符串</span><br><span class="line">test2.extend(&#x27;123&#x27;)   # 会将该字符串转为 list 然后与原数组合并</span><br><span class="line"># 输出：</span><br><span class="line">&gt;&gt;&gt; test2</span><br><span class="line">[1, 3, 5, &#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span><br><span class="line"></span><br><span class="line"># 传 tuple：</span><br><span class="line">   &gt;&gt;&gt; test2.extend((&#x27;c&#x27;,&#x27;d&#x27;))</span><br><span class="line">   &gt;&gt;&gt; test2</span><br><span class="line">   [1, 3, 5, &#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br><span class="line"></span><br><span class="line"># 传 list：</span><br><span class="line">&gt;&gt;&gt; test2.extend([11,&#x27;lomo&#x27;])</span><br><span class="line">&gt;&gt;&gt; test2</span><br><span class="line">[1, 3, 5, &#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, 11, &#x27;lomo&#x27;]</span><br><span class="line"></span><br><span class="line"># 传 dict：</span><br><span class="line">&gt;&gt;&gt; test3</span><br><span class="line">[1, 3, 5]</span><br><span class="line">&gt;&gt;&gt; test3.extend(&#123;&#x27;name&#x27;: &#x27;lomo6&#x27;&#125;)</span><br><span class="line">&gt;&gt;&gt; test3</span><br><span class="line">[1, 3, 5, &#x27;name&#x27;]</span><br><span class="line">&gt;&gt;&gt; test3.extend(&#123;&#x27;age&#x27;: 8&#125;)</span><br><span class="line">&gt;&gt;&gt; test3</span><br><span class="line">[1, 3, 5, &#x27;name&#x27;, &#x27;age&#x27;]</span><br></pre></td></tr></table></figure><p>可以看到传入 <code>dict</code> 时，extend 只会把 dict 的 key 取出来 append 到数组最后。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>排列与组合公式:</p><p><a href="https://www.zhihu.com/question/26094736">https://www.zhihu.com/question/26094736</a></p>]]></content>
    
    
    <summary type="html">Python 内置模块之 itertools</summary>
    
    
    
    <category term="program" scheme="http://lomo.space/categories/program/"/>
    
    
    <category term="python" scheme="http://lomo.space/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>java multiThreads</title>
    <link href="http://lomo.space/2018/05/28/java-multiThreads/"/>
    <id>http://lomo.space/2018/05/28/java-multiThreads/</id>
    <published>2018-05-28T15:08:56.000Z</published>
    <updated>2022-01-14T11:40:22.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java创建多线程的几种方法"><a href="#Java创建多线程的几种方法" class="headerlink" title="Java创建多线程的几种方法"></a>Java创建多线程的几种方法</h2><blockquote><p>前几天被问，只想起来第一种，其它几种忘记了，特此补补。</p></blockquote><h3 id="通过Thread类"><a href="#通过Thread类" class="headerlink" title="通过Thread类"></a>通过Thread类</h3><blockquote><p>第一种，通过继承Thread类，重写<code>run</code>方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 测试类 --&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiThreads</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="comment">// Main m = new Main(&quot;Lomo1&quot;);</span></span><br><span class="line">        <span class="comment">// m.start();</span></span><br><span class="line">        <span class="comment">// Main m2 = new Main(&quot;Lomo2&quot;);</span></span><br><span class="line">        <span class="comment">// m2.start();</span></span><br><span class="line">        <span class="type">Main</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>(<span class="string">&quot;Lomo1&quot;</span>);</span><br><span class="line">        <span class="type">Main</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>(<span class="string">&quot;Lomo2&quot;</span>);</span><br><span class="line">        m.start();</span><br><span class="line">        <span class="comment">// m.start(); 重复调用是会抛异常的！！！</span></span><br><span class="line">        <span class="comment">// m.run();  // 是可以的，直接调用了Main类重写后的run方法！</span></span><br><span class="line">        m2.start();</span><br><span class="line">        <span class="comment">// 上面2个对象调用顺序无关 不影响结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 多线程实现类 --&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Main(String s) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = s;</span><br><span class="line">        System.out.println(<span class="string">&quot;--子类Main--&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    多线程的处理逻辑 重写于此</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.num; i ++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + <span class="built_in">this</span>.name  + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; num = &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--子类Main--Lomo1</span><br><span class="line">--子类Main--Lomo2</span><br><span class="line">线程Lomo1: Thread-0 num = 0</span><br><span class="line">线程Lomo1: Thread-0 num = 1</span><br><span class="line">线程Lomo1: Thread-0 num = 2</span><br><span class="line">线程Lomo2: Thread-1 num = 0</span><br><span class="line">线程Lomo1: Thread-0 num = 3</span><br><span class="line">线程Lomo2: Thread-1 num = 1</span><br><span class="line">线程Lomo1: Thread-0 num = 4</span><br><span class="line">线程Lomo2: Thread-1 num = 2</span><br><span class="line">线程Lomo2: Thread-1 num = 3</span><br><span class="line">线程Lomo2: Thread-1 num = 4</span><br></pre></td></tr></table></figure><blockquote><p>每次运行，可以看到顺序并不同，说明多线程里，那个线程先执行、什么时候执行 均取决于CPU资源的调度。</p></blockquote><p>在注释中<code>m.start();</code>是无法多次调用该方法实现多线程共享同一个对象资源的，因为：<code>start()</code>方法是启动&#x2F;创建一个新线程，新线程会执行相应的run方法，其不能被同一个对象重复调用。</p><h3 id="通过Runnable接口"><a href="#通过Runnable接口" class="headerlink" title="通过Runnable接口"></a>通过Runnable接口</h3><blockquote><p>通过实现Runnable接口重写其<code>run()</code>方法.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二种：通过实现Runnable接口实现多线程</span></span><br><span class="line"><span class="comment"> * Created by lomo.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiThreadsByRunNable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Mains ms = new Mains(&quot;lomoa&quot;);</span></span><br><span class="line"><span class="comment">//        // 第一个线程</span></span><br><span class="line"><span class="comment">//        new Thread(ms).start();</span></span><br><span class="line"><span class="comment">//        // 第二个线程</span></span><br><span class="line"><span class="comment">//        new Thread(ms).start();</span></span><br><span class="line"><span class="comment">// 或这样写(推荐！)</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Mains</span>(<span class="string">&quot;lomoa&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Mains</span>(<span class="string">&quot;lomoaa&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mains</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Mains(String s) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = s;</span><br><span class="line">        System.out.println(<span class="string">&quot;constructor is called --&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i ++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;运行了...&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">constructor is called --lomoa</span><br><span class="line">constructor is called --lomoaa</span><br><span class="line">线程lomoa: Thread-0运行了...0</span><br><span class="line">线程lomoa: Thread-0运行了...1</span><br><span class="line">线程lomoa: Thread-0运行了...2</span><br><span class="line">线程lomoaa: Thread-1运行了...0</span><br><span class="line">线程lomoa: Thread-0运行了...3</span><br><span class="line">线程lomoaa: Thread-1运行了...1</span><br><span class="line">线程lomoa: Thread-0运行了...4</span><br><span class="line">线程lomoaa: Thread-1运行了...2</span><br><span class="line">线程lomoaa: Thread-1运行了...3</span><br><span class="line">线程lomoaa: Thread-1运行了...4</span><br></pre></td></tr></table></figure><blockquote><p>第一种，继承<code>Thread</code>类的实现方法，通过查看<code>Thread</code>的源码，发现其也是实现了<code>Runnable</code>接口方法，本质上是一样的。</p></blockquote><p>通过实现<code>Runnable</code>接口实现方式的有点:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 避免Java中类单继承带来的问题。假设：某个类A已继承了类B，此时需要将类A放入多线程，那么通过实现接口的方式去实现是最好的(接口可以实现多继承)</span><br><span class="line">2. 多个线程可以共享同一个对象资源。</span><br></pre></td></tr></table></figure><h3 id="通过Callable和Future"><a href="#通过Callable和Future" class="headerlink" title="通过Callable和Future"></a>通过Callable和Future</h3><blockquote><p>通过实现<code>Callable</code>接口的<code>call()</code>方法。该call方法作为多线程处理逻辑，类似前面的run方法。call方法要求有返回值.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaClassExercise.multiThreading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第三种：通过Callable接口方式实现多线程</span></span><br><span class="line"><span class="comment"> * Created by lomo .</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiThreadsByCall</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    MultiThreadsByCall() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main函数会启动main线程.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MultiThreadsByCall</span> <span class="variable">multiThreadsByCall</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultiThreadsByCall</span>();</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;(multiThreadsByCall);</span><br><span class="line"><span class="comment">//        new Thread(futureTask).start();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MultiThreadsByCall.N; i ++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 &quot;</span>+ Thread.currentThread().getName() + <span class="string">&quot; 的当前循环变量值为：&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask, <span class="string">&quot;有返回值的线程&quot;</span>).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程的返回值: &quot;</span> + futureTask.get());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.N; i ++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 调用了 &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">线程 main 的当前循环变量值为：0</span><br><span class="line">线程 main 的当前循环变量值为：1</span><br><span class="line">线程 main 的当前循环变量值为：2</span><br><span class="line">线程 main 的当前循环变量值为：3</span><br><span class="line">线程 main 的当前循环变量值为：4</span><br><span class="line">线程 main 的当前循环变量值为：5</span><br><span class="line">线程: 有返回值的线程 调用了 0</span><br><span class="line">线程: 有返回值的线程 调用了 1</span><br><span class="line">线程: 有返回值的线程 调用了 2</span><br><span class="line">线程: 有返回值的线程 调用了 3</span><br><span class="line">线程: 有返回值的线程 调用了 4</span><br><span class="line">线程: 有返回值的线程 调用了 5</span><br><span class="line">线程: 有返回值的线程 调用了 6</span><br><span class="line">线程: 有返回值的线程 调用了 7</span><br><span class="line">线程: 有返回值的线程 调用了 8</span><br><span class="line">线程: 有返回值的线程 调用了 9</span><br><span class="line">线程 main 的当前循环变量值为：6</span><br><span class="line">线程 main 的当前循环变量值为：7</span><br><span class="line">线程 main 的当前循环变量值为：8</span><br><span class="line">线程 main 的当前循环变量值为：9</span><br><span class="line">子线程的返回值: 10</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java创建多线程常见方式</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="java" scheme="http://lomo.space/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>interface-abstract-class</title>
    <link href="http://lomo.space/2018/05/27/interface-abstract-class/"/>
    <id>http://lomo.space/2018/05/27/interface-abstract-class/</id>
    <published>2018-05-27T14:39:11.000Z</published>
    <updated>2022-01-14T11:40:22.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口、抽象类、类的区别"><a href="#接口、抽象类、类的区别" class="headerlink" title="接口、抽象类、类的区别"></a>接口、抽象类、类的区别</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>昨天被问到Java中接口、抽象类、类的区别&#x2F;差异。突然懵逼了，只是简单回答了成员属性以及方法声明的简单差异（太尴尬了，其实这个问题很简单~~）</p><blockquote><p>反思下: 因为确实很久没有写<code>Java</code>代码了(大学又非CS专业，第一份工作中基本没有用到过<code>Java</code>)，Java知识还是来到现东家后靠自己业余时间现学现用。</p></blockquote><p>Notes For 2018-05-26(PM) and for study !</p><h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><p>先上代码（show me the code, no bb😁）</p><p>e.g.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 接口 actionList --&gt;</span><br><span class="line"><span class="keyword">package</span> javaClassExercise.javaInterface;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lomo.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">actionList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认访问级别为public，变量默认为static/final类型常量！</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> <span class="string">&quot;Lomo&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(String s)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">(Double x)</span>;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">studyScore</span><span class="params">(<span class="type">int</span> num)</span>;</span><br><span class="line">    <span class="comment">// static &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 抽象类 --&gt;</span><br><span class="line"><span class="keyword">package</span> javaClassExercise.javaInterface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lomo.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">peopleAction</span> <span class="keyword">implements</span> <span class="title class_">actionList</span>&#123;</span><br><span class="line">    <span class="comment">// 构造器/构造函数</span></span><br><span class="line">    peopleAction() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Author: &quot;</span> + author);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写的方法必须加修饰符，因为这在类中！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重载eat方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i ate&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i listened&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">(Double s)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">studyScore</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;i get score: &quot; + num);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title function_">abstractTestMethod</span><span class="params">(String s)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 普通类 --&gt;</span><br><span class="line"><span class="keyword">package</span> javaClassExercise.javaInterface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lomo.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">peopleActionTest</span> <span class="keyword">extends</span> <span class="title class_">peopleAction</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在对子类进行初始化的时候，会先调用父类的构造器</span></span><br><span class="line">    peopleActionTest() &#123;</span><br><span class="line">        <span class="built_in">super</span>();  <span class="comment">// 手动显式调用上面👆抽象类的peopleAction构造函数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">abstractTestMethod</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">(Double s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Lomo has been walked &quot;</span> + s + <span class="string">&quot;km&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载walk方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">(String Name, Double s)</span> &#123;</span><br><span class="line">        System.out.println(Name + <span class="string">&quot;had been walked &quot;</span> + s + <span class="string">&quot;km ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">peopleAction</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">peopleActionTest</span>();</span><br><span class="line"><span class="comment">//        peopleAction pp = new peopleAction();</span></span><br><span class="line">        p.eat(<span class="string">&quot;米饭&quot;</span>);</span><br><span class="line">        p.walk(<span class="number">2.5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">peopleActionTest</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">peopleActionTest</span>();</span><br><span class="line">        ps.walk(<span class="number">4.2</span>);</span><br><span class="line">        ps.walk(<span class="string">&quot;chenqiao&quot;</span>, <span class="number">7.8</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Update</strong><br>针对第⑥点总结示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 接口中不能有`main`主函数方法，而抽象类、普通类可以有</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 单纯声明一个包含main方法的抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">staticAbstractClass</span> &#123;</span><br><span class="line">    staticAbstractClass() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类的构造函数被调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">printSth</span><span class="params">(String s)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包含main方法的抽象类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ide中调试直接运行, 可以发现可以被执行了。输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包含main方法的抽象类</span><br></pre></td></tr></table></figure><p>即 调用了抽象类的main方法。</p><p>对其进一步改进:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">abstractStaticMethod</span> <span class="keyword">extends</span> <span class="title class_">staticAbstractClass</span>&#123;</span><br><span class="line">    abstractStaticMethod() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;abstractStaticMethod被调用了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printSth</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String ...args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Lomo 168 aa aa...&quot;</span>);</span><br><span class="line">        <span class="type">abstractStaticMethod</span> <span class="variable">asm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">abstractStaticMethod</span>();</span><br><span class="line">        asm.printSth(<span class="string">&quot;lomo178&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">staticAbstractClass</span> &#123;</span><br><span class="line">    staticAbstractClass() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类的构造函数被调用了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">printSth</span><span class="params">(String s)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;包含main方法的抽象类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右键运行<code>abstractStaticMethod</code>方法，输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Lomo 168 aa aa...</span><br><span class="line">抽象类的构造函数被调用了...</span><br><span class="line">abstractStaticMethod被调用了</span><br><span class="line">lomo178</span><br></pre></td></tr></table></figure><p>可以看到运行该<code>public</code>时，其并没有调用父类抽象类的<code>main</code>方法，而是只执行本类的<code>main</code>方法。(此外，构造函数执行顺序：父类(抽象类)-&gt;子类(本类) ).</p><p>通常，<code>抽象类</code>中定义<code>main</code>方法好像意义不大!</p><p>① 关于成员属性(变量)方面:</p><blockquote><p>接口中的成员属性一般为<code>static final</code>修饰，即：默认访问权限为public且接口中声明的成员属性一般为写死的(final)不能为修改.</p></blockquote><p>② 关于static关键字方面:</p><blockquote><p>接口中不能包含static修饰的方法或static静态代码块. 可以手动尝试，在接口中声明一个static 代码块或方法，IDE就会直接报错！😁</p></blockquote><p>③ 关于方法的声明方面:</p><blockquote><p>接口中的所有方法均无方法体(即无具体的方法实现逻辑、运算过程…)，抽象类中一般都包含抽象方法(即无具体方法体的方法，只声明了函数名以及函数访问修饰符、返回值类型、参数个数、参数类型)，但是抽象类中可以包含有具体实现的方法也可以包含静态代码块(接口则不行)。抽象类的抽象方法修饰符一般为<code>public</code>或<code>protected</code>(无private, 如果是private则无法被继承的类去继承重写该方法!)且抽象方法也没有具体的方法体实现，只有声明，与接口中的类似.</p></blockquote><p>④ 关于继承方面:</p><blockquote><p>一个普通类一次只能继承<code>extends</code>一个类(该类可以是普通类、抽象类)，但是可以同时实现<code>implements</code>多个接口，继承抽象类时，需要在该类中实现抽象类中的所有抽象方法，实现几个接口就要重写实现接口中的所有(抽象)方法.</p></blockquote><p>另, <code>一个接口可以同时继承多个其它接口</code>。 但是，<code>一个接口不能实现另一个接口!!!</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单一接口继承多个接口</span></span><br><span class="line"><span class="comment">// 预定义 接口bInterface, cInterface, dInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">bInterface</span>, cInterface, dInterface &#123;</span><br><span class="line">    <span class="comment">// TODO ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤ 关于构造器方面：</p><blockquote><p>接口无构造器; 抽象类、类可以有(手动显式&#x2F;默认隐式)</p></blockquote><p>⑥ main方法方面:</p><blockquote><p>接口中不能有<code>main</code>主函数方法，而抽象类可以有(见上例)、普通类可以有.</p></blockquote><p>⑦ 添加新方法方面:</p><blockquote><p>接口中添加新方法，需要考虑那些实现了该接口的类(必须要改变、操作实现了该接口的类)，而添加在抽象类中，则可以给出默认具体实现而不必去修改该类的子类.</p></blockquote><p>另，Java是单继承!!!</p>]]></content>
    
    
    <summary type="html">Java中接口、抽象类、类区别</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="java" scheme="http://lomo.space/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>迷你版k8s</title>
    <link href="http://lomo.space/2018/03/17/minikube-study/"/>
    <id>http://lomo.space/2018/03/17/minikube-study/</id>
    <published>2018-03-17T15:57:23.000Z</published>
    <updated>2022-01-14T11:40:22.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于Kubernets"><a href="#关于Kubernets" class="headerlink" title="关于Kubernets"></a>关于Kubernets</h3><blockquote><p>一个流行的容器编排引擎、自动化容器操作的开源平台。</p></blockquote><p>主要是针对集群，包含但不限于：对容器的部署、调度、节点集群扩展等等功能。</p><h3 id="关于minikube"><a href="#关于minikube" class="headerlink" title="关于minikube"></a>关于minikube</h3><blockquote><p>迷你版minikube（来自阿里云）。方便本地部署学习Kubernetes(k8s)。</p></blockquote><h3 id="安装minikube"><a href="#安装minikube" class="headerlink" title="安装minikube"></a>安装minikube</h3><h4 id="预置"><a href="#预置" class="headerlink" title="预置"></a>预置</h4><blockquote><p>以Mac OSX上实验为例。</p></blockquote><p>1&gt; 安装Kubectl </p><p>Kubectl安装直接使用<code>brew</code>即可。</p><p>参考： <a href="https://kubernetes.io/docs/tasks/kubectl/install/?spm=a2c4e.11153940.blogcont221687.19.7dd57733VzYIPy">https://kubernetes.io/docs/tasks/kubectl/install/?spm=a2c4e.11153940.blogcont221687.19.7dd57733VzYIPy</a></p><p>2&gt; 安装VM(Virtual Box虚拟机)</p><p>官网下载<code>.dmg</code>文件双击安装即可。</p><p>3&gt; minikube</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行以下命令即可</span></span><br><span class="line">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.26.1/minikube-darwin-amd64 &amp;&amp; <span class="built_in">chmod</span> +x minikube &amp;&amp; sudo <span class="built_in">mv</span> minikube /usr/local/bin/</span><br></pre></td></tr></table></figure><div align="center">    <img src="https://gitee.com/uploads/images/2018/0518/000555_415e4353_1120068.png"></div><p>4&gt; 启动</p><blockquote><p>minikube默认使用virtual box启动本地 Kubernetes 环境（利用本地虚拟机部署 Kubernetes环境）。所以前面要求安装VM，否则执行到该步骤会报错.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># terminal exec</span></span><br><span class="line">minikube start --registry-mirror=https://registry.docker-cn.com</span><br></pre></td></tr></table></figure><p>此时，会看到控制台下载了一些镜像文件。</p><div align="center">    <img src="https://gitee.com/uploads/images/2018/0517/192017_cfe6328c_1120068.png"></div><p>下载完后：</p><div align="center">    <img src="https://gitee.com/uploads/images/2018/0517/193332_430b4643_1120068.png"></div><p>5&gt; 启动web UI(Dashboard)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><p>执行后，会自动打开浏览器跳至URL <code>http://192.168.99.100:30000/#!/overview?namespace=default</code></p><p>如图:</p><div align="center">    <img src="https://gitee.com/uploads/images/2018/0517/193743_2b725ce3_1120068.png"></div><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>通过控制台<code>console</code>发现，<code>minikube</code>前端是使用<code>Angular</code>开发(1.6.6版本，😁)</p><p>后续继续研究 <code>k8s</code> … … </p>]]></content>
    
    
    <summary type="html">迷你版Kubernetes(k8s)</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="docker" scheme="http://lomo.space/tags/docker/"/>
    
    <category term="k8s" scheme="http://lomo.space/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>observable</title>
    <link href="http://lomo.space/2018/02/24/observable/"/>
    <id>http://lomo.space/2018/02/24/observable/</id>
    <published>2018-02-24T11:11:51.000Z</published>
    <updated>2022-01-14T11:40:22.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之订阅者模式"><a href="#设计模式之订阅者模式" class="headerlink" title="设计模式之订阅者模式"></a>设计模式之订阅者模式</h2><blockquote><p>简单记录Observable. 该设计模式是RxJS的核心之一。</p></blockquote><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>一个目标对象 管理者所有依赖于它的观察者对象，当它(该目标对象)发生改变时，它会主动发出通知，告知所有订阅了该目标对象的观察者对象，进而使这些观察者对象自我更新。</p></blockquote><p>示例：</p><p>很多媒体、新闻网站都会有订阅功能，网友通过订阅该网站的某些栏目或类别的信息，就会定期收到更新的内容通知，网友就可以进行阅览。当网友取消订阅，就不会再接收任何消息。</p><p>在该过程中：</p><pre><code>该网站 =&gt; 目标对象；网友 =&gt; 观察者；</code></pre><p>这是一个简单的一对多模型。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li><p>RxJS</p></li><li><p>常见的Web应用中对DOM添加事件监听( <code>addEventListener</code> )。</p></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象类，被订阅者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">observerCollection</span>: <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observerCollection</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册订阅者</span></span><br><span class="line">    <span class="title function_">registerObserver</span>(<span class="params">observer: Observer</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observerCollection</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移除订阅者</span></span><br><span class="line">    <span class="title function_">unregisterObserver</span>(<span class="params">observer: Observer</span>) &#123;</span><br><span class="line">        <span class="comment">// 查找订阅者</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">observerCollection</span>.<span class="title function_">indexOf</span>(observer);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 去除该订阅者</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">observerCollection</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通知所有订阅者</span></span><br><span class="line">    <span class="title function_">notifyObservers</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observerCollection</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">observer: Observer</span>) =&gt;</span> observer.<span class="title function_">notify</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者类，观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> has been notified.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目标对象</span></span><br><span class="line"><span class="keyword">let</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建观察者对象</span></span><br><span class="line"><span class="keyword">let</span> observer1 = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;lomo0&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> observer2 = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&#x27;lomo1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册订阅者(给观察者对象添加订阅)</span></span><br><span class="line">subject.<span class="title function_">registerObserver</span>(observer1);</span><br><span class="line">subject.<span class="title function_">registerObserver</span>(observer2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 通知注册者(观察者对象)</span></span><br><span class="line"><span class="comment">// lomo0 has been notified.</span></span><br><span class="line"><span class="comment">// lomo1 has been notified.</span></span><br><span class="line">subject.<span class="title function_">notifyObservers</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 移除订阅者</span></span><br><span class="line">subject.<span class="title function_">unregisterObserver</span>(observer1);</span><br><span class="line"><span class="comment">// 验证移除是否Ok</span></span><br><span class="line"><span class="comment">// lomo1 has been notified.</span></span><br><span class="line">subject.<span class="title function_">notifyObservers</span>();</span><br></pre></td></tr></table></figure><h3 id="Angular中的应用"><a href="#Angular中的应用" class="headerlink" title="Angular中的应用"></a>Angular中的应用</h3><blockquote><p>ng2+中; 后续添加项目应用code.</p></blockquote>]]></content>
    
    
    <summary type="html">设计模式之订阅者模式</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="DesignPatterns" scheme="http://lomo.space/tags/DesignPatterns/"/>
    
    <category term="observable" scheme="http://lomo.space/tags/observable/"/>
    
  </entry>
  
  <entry>
    <title>general sql grammar</title>
    <link href="http://lomo.space/2017/10/03/general-sql-grammar/"/>
    <id>http://lomo.space/2017/10/03/general-sql-grammar/</id>
    <published>2017-10-03T06:14:27.000Z</published>
    <updated>2022-01-14T11:40:22.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL内置函数"><a href="#MySQL内置函数" class="headerlink" title="MySQL内置函数"></a>MySQL内置函数</h2><blockquote><p>平时写 SQL 用(到)过的一些 MySQL 内置函数.</p></blockquote><h3 id="常见查询"><a href="#常见查询" class="headerlink" title="常见查询"></a>常见查询</h3><p>e.g.1</p><p><code>version</code> 表:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------------------+------+-----+---------------------+----------------+</span><br><span class="line">| Field       | Type                | Null | Key | Default             | Extra          |</span><br><span class="line">+-------------+---------------------+------+-----+---------------------+----------------+</span><br><span class="line">| <span class="built_in">id</span>          | bigint(20) unsigned | NO   | PRI | NULL                | auto_increment |</span><br><span class="line">| project_id  | int(11)             | NO   |     | NULL                |                |</span><br><span class="line">| version     | varchar(32)         | NO   |     | NULL                |                |</span><br><span class="line">| build       | int(11)             | NO   |     | NULL                |                |</span><br><span class="line">| stage       | varchar(32)         | NO   |     | NULL                |                |</span><br><span class="line">| created_at  | timestamp           | NO   |     | CURRENT_TIMESTAMP   |                |</span><br><span class="line">| released_at | timestamp           | NO   |     | 0000-00-00 00:00:00 |                |</span><br><span class="line">| commit_hash | varchar(128)        | YES  |     | NULL                |                |</span><br><span class="line">+-------------+---------------------+------+-----+---------------------+----------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p><code>project_id</code> 只有2个值 分别为 1、2 代表 <code>iOS</code> 和 <code>Android</code>.</p><p>Q:  从version表取出: 指定版本号(version)、阶段(stage)的最小build号对应的id</p><p>A: 查出结果集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> version <span class="keyword">where</span> version<span class="operator">=</span><span class="string">&#x27;5.26.0&#x27;</span> <span class="keyword">and</span> stage<span class="operator">=</span><span class="string">&#x27;grey&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> build limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----+------------+---------+-------+-------+---------------------+---------------------+------------------------------------------+</span><br><span class="line">| <span class="built_in">id</span> | project_id | version | build | stage | created_at          | released_at         | commit_hash                              |</span><br><span class="line">+----+------------+---------+-------+-------+---------------------+---------------------+------------------------------------------+</span><br><span class="line">| 37 |          2 | 5.26.0  |   898 | grey  | 2018-09-14 15:31:19 | 0000-00-00 00:00:00 | 369f6761d4a2162a96151799fd879509d34dfdeb |</span><br><span class="line">+----+------------+---------+-------+-------+---------------------+---------------------+------------------------------------------+</span><br></pre></td></tr></table></figure><p>只获取所需的 <code>id</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> v.id <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> version <span class="keyword">where</span> version<span class="operator">=</span><span class="string">&#x27;5.26.0&#x27;</span> <span class="keyword">and</span> stage<span class="operator">=</span><span class="string">&#x27;grey&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> build limit <span class="number">1</span>) <span class="keyword">as</span> v;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+</span><br><span class="line">| <span class="built_in">id</span> |</span><br><span class="line">+----+</span><br><span class="line">| 37 |</span><br><span class="line">+----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.06 sec)</span><br></pre></td></tr></table></figure><p>使用了 <code>select</code> 子查询. 注意子查询语句后的 <code>as</code> 语法.</p><h4 id="跨表查询-join"><a href="#跨表查询-join" class="headerlink" title="跨表查询(join)"></a>跨表查询(join)</h4><blockquote><p>join 默认为 left join</p></blockquote><p>e.g.2</p><p>现同一DB下有另一张 <code>table</code> 名为 <code>mr</code>, 结构如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc mr;</span><br><span class="line">+------------------+---------------------+------+-----+---------------------+-----------------------------+</span><br><span class="line">| Field            | Type                | Null | Key | Default             | Extra                       |</span><br><span class="line">+------------------+---------------------+------+-----+---------------------+-----------------------------+</span><br><span class="line">| <span class="built_in">id</span>               | bigint(20) unsigned | NO   | PRI | NULL                | auto_increment              |</span><br><span class="line">| project_id       | int(11)             | NO   | MUL | NULL                |                             |</span><br><span class="line">| mr_id            | int(11) unsigned    | NO   |     | NULL                |                             |</span><br><span class="line">| version_id       | int(11)             | YES  |     | NULL                |                             |</span><br><span class="line">| product_id       | int(11)             | YES  |     | NULL                |                             |</span><br><span class="line">| testcase         | varchar(512)        | YES  |     | NULL                |                             |</span><br><span class="line">| description      | text                | YES  |     | NULL                |                             |</span><br><span class="line">| reject           | tinyint(11)         | NO   |     | 0                   |                             |</span><br><span class="line">| failed           | tinyint(11)         | NO   |     | 0                   |                             |</span><br><span class="line">| author           | varchar(64)         | NO   |     | NULL                |                             |</span><br><span class="line">| title            | varchar(128)        | NO   |     | NULL                |                             |</span><br><span class="line">| jira_key         | varchar(64)         | NO   |     |                     |                             |</span><br><span class="line">| status           | varchar(32)         | YES  |     | NULL                |                             |</span><br><span class="line">| changed_file     | int(11) unsigned    | NO   |     | NULL                |                             |</span><br><span class="line">| additions        | int(11) unsigned    | NO   |     | NULL                |                             |</span><br><span class="line">| deletions        | int(11) unsigned    | NO   |     | NULL                |                             |</span><br><span class="line">| created_at       | timestamp           | NO   |     | CURRENT_TIMESTAMP   |                             |</span><br><span class="line">| merged_at        | timestamp           | NO   |     | 0000-00-00 00:00:00 |                             |</span><br><span class="line">| updated_at       | timestamp           | NO   |     | CURRENT_TIMESTAMP   | on update CURRENT_TIMESTAMP |</span><br><span class="line">| total_review     | int(11)             | YES  |     | NULL                |                             |</span><br><span class="line">| resolved_review  | int(11)             | YES  |     | NULL                |                             |</span><br><span class="line">| pa_name          | varchar(32)         | YES  |     | NULL                |                             |</span><br><span class="line">| bug_count        | int(11) unsigned    | NO   |     | 0                   |                             |</span><br><span class="line">| severe_bug_count | int(11) unsigned    | NO   |     | 0                   |                             |</span><br><span class="line">| bug_list         | text                | YES  |     | NULL                |                             |</span><br><span class="line">+------------------+---------------------+------+-----+---------------------+-----------------------------+</span><br><span class="line">25 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><p><code>mr</code> 表中的 <code>version_id</code> 字段和 <code>version</code>表中的 <code>id</code> 相等.</p><p>Q: 给定一个版本号(如: <code>5.26.0</code>)、且 <code>stage=grey</code>情况下 获取 <code>mr</code> 表中该版本该 <code>stage</code> 对应的数据.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> mr_id, jira_key, title, author,pa_name,changed_file,additions,deletions </span><br><span class="line"><span class="keyword">from</span> mr <span class="keyword">where</span> version_id <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> v.id <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> version <span class="keyword">where</span> version<span class="operator">=</span><span class="string">&#x27;5.26.0&#x27;</span> <span class="keyword">and</span> stage<span class="operator">=</span><span class="string">&#x27;grey&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> build limit <span class="number">1</span>) <span class="keyword">as</span> v);</span><br></pre></td></tr></table></figure><p>子查询中使用了 <code>limit 1</code> 表示 只取 <code>version</code> 表中的最小的 <code>id</code>.</p><p><img src="https://images.gitee.com/uploads/images/2018/1021/143847_975cf667_1120068.png" alt="指定查询" title="屏幕截图.png"></p><p>e.g.3</p><p>Q: 查询 <code>iOS</code> 所有版本的 <code>mr</code> 关键信息</p><p>A:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> version.version <span class="keyword">as</span> <span class="string">&#x27;版本号&#x27;</span>,<span class="built_in">sum</span>(mr.changed_file) <span class="keyword">as</span> <span class="string">&#x27;修改文件数&#x27;</span>, </span><br><span class="line"><span class="built_in">sum</span>(mr.additions) <span class="keyword">as</span> <span class="string">&#x27;新增代码行数&#x27;</span>, <span class="built_in">sum</span>(mr.deletions) <span class="keyword">as</span> <span class="string">&#x27;删除代码行数&#x27;</span>, </span><br><span class="line">pa_name <span class="keyword">from</span> version <span class="keyword">left</span> <span class="keyword">join</span> mr <span class="keyword">on</span> version.id<span class="operator">=</span>mr.version_id <span class="keyword">where</span> mr.project_id<span class="operator">=</span><span class="number">1</span> <span class="keyword">group</span> <span class="keyword">by</span> version;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+-----------+-----------------+--------------------+--------------------+-----------------+</span><br><span class="line">| 版本号    | 修改文件数      | 新增代码行数       | 删除代码行数       | pa_name         |</span><br><span class="line">+-----------+-----------------+--------------------+--------------------+-----------------+</span><br><span class="line">| 4.24.0    |              44 |                242 |                 50 | smart-community |</span><br><span class="line">| 4.24.1    |               1 |                 29 |                  0 | NULL            |</span><br><span class="line">| 4.25.0    |              31 |                177 |                115 | community       |</span><br><span class="line">| 4.25.1    |              43 |                199 |                141 | community       |</span><br><span class="line">| 4.26.0    |             366 |               7897 |               3083 | community       |</span><br><span class="line">| 4.26.1    |             127 |                776 |                339 | community       |</span><br><span class="line">| 4.26.2    |              10 |                 53 |                 10 | community       |</span><br><span class="line">| 4.26.3    |               0 |                  0 |                  0 | community       |</span><br><span class="line">| 4.27.0    |             376 |               5241 |               2321 | mobile-platform |</span><br><span class="line">| 4.27.1    |              63 |                838 |                561 | NULL            |</span><br><span class="line">| 4.28.0    |             424 |               1117 |              15794 | community       |</span><br><span class="line">+-----------+-----------------+--------------------+--------------------+-----------------+</span><br><span class="line">11 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.03 sec)</span><br></pre></td></tr></table></figure><p>e.g.4</p><p>Q: 以pa_name 为维度 查询某个Android grey阶段 某个版本 （如: <code>version=&#39;5.26.0&#39; , stage=&#39;grey&#39; , project_id=2</code>） mr 表中的关键信息.</p><p>A:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(mr_id) <span class="keyword">as</span> <span class="string">&#x27;MR 数&#x27;</span>,pa_name <span class="keyword">as</span> <span class="string">&#x27;PA&#x27;</span>,<span class="built_in">sum</span>(changed_file) <span class="keyword">as</span> <span class="string">&#x27;修改文件数&#x27;</span>, </span><br><span class="line"><span class="built_in">sum</span>(additions) <span class="keyword">as</span> <span class="string">&#x27;新增代码行数&#x27;</span>, <span class="built_in">sum</span>(deletions) <span class="keyword">as</span> <span class="string">&#x27;删除代码行数&#x27;</span> </span><br><span class="line"><span class="keyword">from</span> mr <span class="keyword">where</span> version_id <span class="keyword">in</span> (<span class="keyword">select</span> v.id <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> version <span class="keyword">where</span> version<span class="operator">=</span><span class="string">&#x27;5.26.0&#x27;</span> <span class="keyword">and</span> stage<span class="operator">=</span><span class="string">&#x27;grey&#x27;</span> <span class="keyword">and</span> project_id<span class="operator">=</span><span class="number">2</span> <span class="keyword">order</span> <span class="keyword">by</span> build limit <span class="number">1</span>) <span class="keyword">as</span> v) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> pa_name;</span><br></pre></td></tr></table></figure><p>结果集:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------+-----------------+-----------------+--------------------+--------------------+</span><br><span class="line">| MR 数  | PA              | 修改文件数      | 新增代码行数       | 删除代码行数       |</span><br><span class="line">+--------+-----------------+-----------------+--------------------+--------------------+</span><br><span class="line">|      3 | commercial      |               3 |                  3 |                  3 |</span><br><span class="line">|      6 | community       |              19 |               3821 |                 18 |</span><br><span class="line">|      1 | mobile-platform |               1 |                  1 |                  1 |</span><br><span class="line">|      1 | smart-community |               1 |                  1 |                  1 |</span><br><span class="line">+--------+-----------------+-----------------+--------------------+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><h4 id="合并查询-union"><a href="#合并查询-union" class="headerlink" title="合并查询(union)"></a>合并查询(union)</h4><p>现有另一张表 <code>diff</code>, 其中某些字段类型 和 <code>mr</code> 表的一些字段(pa_name, changed_file, additions, deletions)含义类似. 结构如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc diff;</span><br><span class="line">+------------------+---------------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">| Field            | Type                | Null | Key | Default           | Extra                       |</span><br><span class="line">+------------------+---------------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">| <span class="built_in">id</span>               | bigint(20) unsigned | NO   | PRI | NULL              | auto_increment              |</span><br><span class="line">| project_id       | int(11)             | NO   |     | NULL              |                             |</span><br><span class="line">| module_name      | varchar(64)         | NO   |     | NULL              |                             |</span><br><span class="line">| version_from     | varchar(128)        | YES  |     |                   |                             |</span><br><span class="line">| version_to       | varchar(128)        | YES  |     |                   |                             |</span><br><span class="line">| version_id       | int(11)             | NO   |     | NULL              |                             |</span><br><span class="line">| product_id       | int(11)             | YES  |     | NULL              |                             |</span><br><span class="line">| testcase         | varchar(512)        | YES  |     | NULL              |                             |</span><br><span class="line">| description      | text                | YES  |     | NULL              |                             |</span><br><span class="line">| reject           | tinyint(11)         | NO   |     | 0                 |                             |</span><br><span class="line">| failed           | tinyint(11)         | NO   |     | 0                 |                             |</span><br><span class="line">| author           | varchar(64)         | NO   |     | NULL              |                             |</span><br><span class="line">| jira_key         | varchar(64)         | NO   |     |                   |                             |</span><br><span class="line">| changed_file     | int(11) unsigned    | YES  |     | 0                 |                             |</span><br><span class="line">| additions        | int(11) unsigned    | YES  |     | 0                 |                             |</span><br><span class="line">| deletions        | int(11) unsigned    | YES  |     | 0                 |                             |</span><br><span class="line">| created_at       | timestamp           | NO   |     | CURRENT_TIMESTAMP |                             |</span><br><span class="line">| updated_at       | timestamp           | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |</span><br><span class="line">| pa_name          | varchar(32)         | YES  |     | NULL              |                             |</span><br><span class="line">| severe_bug_count | int(11) unsigned    | NO   |     | 0                 |                             |</span><br><span class="line">| bug_count        | int(11) unsigned    | NO   |     | 0                 |                             |</span><br><span class="line">| bug_list         | text                | YES  |     | NULL              |                             |</span><br><span class="line">+------------------+---------------------+------+-----+-------------------+-----------------------------+</span><br><span class="line">22 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><p>Q: 现需要获取, Android 某个版本(如: 5.26.0) 灰度(stage&#x3D;grey) 所有 <code>mr</code> 与 <code>diff</code> 表中的 <code>changed_file, additions, deletions</code> 总和 结果以 <code>pa_name</code> 升序排列.</p><p>A:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.pa_name <span class="keyword">as</span> <span class="string">&#x27;PA&#x27;</span>, <span class="built_in">sum</span>(t.changed_file) <span class="keyword">as</span> <span class="string">&#x27;修改文件数&#x27;</span>, </span><br><span class="line"><span class="built_in">sum</span>(t.additions) <span class="keyword">as</span> <span class="string">&#x27;新增代码行数&#x27;</span>, <span class="built_in">sum</span>(t.deletions) <span class="keyword">as</span> <span class="string">&#x27;删除代码行数&#x27;</span> </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> version_id,pa_name,changed_file, additions, deletions </span><br><span class="line"><span class="keyword">from</span> mr <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span>  version_id,pa_name, changed_file, additions, deletions <span class="keyword">from</span> diff) t</span><br><span class="line"><span class="keyword">where</span> t.version_id <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> v.id <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> version <span class="keyword">where</span> version<span class="operator">=</span><span class="string">&#x27;5.26.0&#x27;</span> <span class="keyword">and</span> stage<span class="operator">=</span><span class="string">&#x27;grey&#x27;</span> <span class="keyword">and</span> project_id<span class="operator">=</span><span class="number">2</span> <span class="keyword">order</span> <span class="keyword">by</span> build limit <span class="number">1</span>) <span class="keyword">as</span> v) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.pa_name;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+-----------------+--------------------+--------------------+</span><br><span class="line">| PA              | 修改文件数      | 新增代码行数       | 删除代码行数       |</span><br><span class="line">+-----------------+-----------------+--------------------+--------------------+</span><br><span class="line">| commercial      |               4 |                  4 |                  4 |</span><br><span class="line">| community       |              19 |               3821 |                 18 |</span><br><span class="line">| mobile-platform |               1 |                  1 |                  1 |</span><br><span class="line">| smart-community |              59 |               2061 |                220 |</span><br><span class="line">+-----------------+-----------------+--------------------+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><p>涉及到 <code>union all</code> 组合查询.</p><p><code>union</code> 会把重复的记录从结果集中去除掉;<br><code>unoin</code> 会把所有的记录返回, 所以效率比上一个高.</p><h3 id="常见时间日期操作"><a href="#常见时间日期操作" class="headerlink" title="常见时间日期操作"></a>常见时间日期操作</h3><p>现有 <code>downtime</code> 表, 结构如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc downtime;</span><br><span class="line">+----------------+---------------------+------+-----+---------------------+----------------+</span><br><span class="line">| Field          | Type                | Null | Key | Default             | Extra          |</span><br><span class="line">+----------------+---------------------+------+-----+---------------------+----------------+</span><br><span class="line">| <span class="built_in">id</span>             | bigint(20) unsigned | NO   | PRI | NULL                | auto_increment |</span><br><span class="line">| downtime_id    | varchar(128)        | NO   |     | NULL                |                |</span><br><span class="line">| title          | varchar(128)        | NO   |     | NULL                |                |</span><br><span class="line">| author         | varchar(32)         | NO   |     | NULL                |                |</span><br><span class="line">| status         | varchar(32)         | NO   |     | NULL                |                |</span><br><span class="line">| level          | varchar(32)         | NO   |     | NULL                |                |</span><br><span class="line">| introduce_type | varchar(32)         | NO   |     | NULL                |                |</span><br><span class="line">| end_type       | varchar(32)         | NO   |     | NULL                |                |</span><br><span class="line">| teams          | text                | YES  |     | NULL                |                |</span><br><span class="line">| start_time     | timestamp           | NO   |     | CURRENT_TIMESTAMP   |                |</span><br><span class="line">| end_time       | timestamp           | NO   |     | 0000-00-00 00:00:00 |                |</span><br><span class="line">| created_at     | timestamp           | NO   |     | 0000-00-00 00:00:00 |                |</span><br><span class="line">| updated_at     | timestamp           | NO   |     | 0000-00-00 00:00:00 |                |</span><br><span class="line">+----------------+---------------------+------+-----+---------------------+----------------+</span><br><span class="line">13 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><p>e.g.1</p><p>Q: 以 <code>level</code> 为维度统计本年度(2018) <code>downtime</code> 表中的故障信息</p><p>A:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">&#x27;数量&#x27;</span>, level <span class="keyword">as</span> <span class="string">&#x27;等级&#x27;</span>, <span class="keyword">year</span>(created_at) <span class="keyword">as</span> <span class="string">&#x27;创建时间&#x27;</span> </span><br><span class="line"><span class="keyword">from</span> downtime <span class="keyword">where</span> <span class="keyword">year</span>(created_at)<span class="operator">=</span><span class="number">2018</span> <span class="keyword">group</span> <span class="keyword">by</span> level, <span class="keyword">year</span>(created_at) <span class="keyword">order</span> <span class="keyword">by</span> level, <span class="keyword">year</span>(created_at) <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------+--------+--------------+</span><br><span class="line">| 数量   | 等级   | 创建时间     |</span><br><span class="line">+--------+--------+--------------+</span><br><span class="line">|     36 | P0     |         2018 |</span><br><span class="line">|     66 | P1     |         2018 |</span><br><span class="line">|     97 | P2     |         2018 |</span><br><span class="line">|     67 | P3     |         2018 |</span><br><span class="line">|     42 | P4     |         2018 |</span><br><span class="line">|      5 | P5     |         2018 |</span><br><span class="line">+--------+--------+--------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.29 sec)</span><br></pre></td></tr></table></figure><p>使用了 内置的  <code>year</code> 函数. <code>year</code> 函数根据 表中存储的时间戳(如: ‘2018-08-28 14:58:00’), <code>year(2018-08-28 14:58:00)</code> 返回 <code>2018</code>.</p><p>e.g.2</p><p>Q: 求本年度downtime平均时长</p><p>使用 <code>TIMESTAMPDIFF</code> 来计算两个时间段之间的差值.</p><p>这个mysql中的函数 可以用来计算2个时间段差值。第一个参数是精确单位： YEAR&#x2F; MONTH&#x2F;QUARTER&#x2F;WEEK&#x2F;DAY&#x2F;HOUR&#x2F;MINUTE&#x2F;SECOND&#x2F;FRAC_SECOND</p><blockquote><p>FRAC_SECOND: 毫秒</p></blockquote><p>A:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(TIMESTAMPDIFF(<span class="keyword">HOUR</span>, start_time, end_time)) <span class="keyword">from</span> downtime <span class="keyword">where</span> <span class="keyword">year</span>(created_at)<span class="operator">=</span><span class="number">2018</span>;</span><br></pre></td></tr></table></figure><p>e.g.3</p><p>Q: 以周为维度统计本年度 downtime 信息(P2 +)</p><p>A:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;第&#x27;</span>, week(created_at,<span class="number">1</span>), <span class="string">&#x27;周&#x27;</span>) <span class="keyword">as</span> <span class="string">&#x27;Week&#x27;</span>, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">&#x27;新增 Downtime 数量&#x27;</span>, </span><br><span class="line"><span class="built_in">sum</span>(if(level <span class="keyword">in</span> (<span class="string">&#x27;P0&#x27;</span>, <span class="string">&#x27;P1&#x27;</span>, <span class="string">&#x27;P2&#x27;</span>), <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">as</span> <span class="string">&#x27;新增 P2 以上 Downtime 数量&#x27;</span> </span><br><span class="line"><span class="keyword">from</span> downtime <span class="keyword">where</span> <span class="keyword">year</span>(created_at)<span class="operator">=</span><span class="number">2018</span> <span class="keyword">group</span> <span class="keyword">by</span> week(created_at,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>使用 week函数，第二个参数 1 代表 从每周从 Monday开始计算(mysql默认无参数表示从 sunday周日 算起 为一周开始).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">+----------+------------------------+----------------------------------+</span><br><span class="line">| Week     | 新增 Downtime 数量     | 新增 P2 以上 Downtime 数量       |</span><br><span class="line">+----------+------------------------+----------------------------------+</span><br><span class="line">| 第2周    |                      5 |                                2 |</span><br><span class="line">| 第3周    |                     10 |                                5 |</span><br><span class="line">| 第4周    |                      6 |                                6 |</span><br><span class="line">| 第5周    |                      7 |                                2 |</span><br><span class="line">| 第6周    |                      3 |                                1 |</span><br><span class="line">| 第9周    |                      4 |                                2 |</span><br><span class="line">| 第10周   |                      8 |                                6 |</span><br><span class="line">| 第11周   |                      3 |                                1 |</span><br><span class="line">| 第12周   |                      8 |                                2 |</span><br><span class="line">| 第13周   |                      5 |                                3 |</span><br><span class="line">| 第14周   |                     10 |                                4 |</span><br><span class="line">| 第15周   |                     10 |                                7 |</span><br><span class="line">| 第16周   |                      7 |                                5 |</span><br><span class="line">| 第17周   |                      9 |                                7 |</span><br><span class="line">| 第18周   |                      3 |                                3 |</span><br><span class="line">| 第19周   |                      9 |                                7 |</span><br><span class="line">| 第20周   |                     10 |                                6 |</span><br><span class="line">| 第21周   |                     11 |                                8 |</span><br><span class="line">| 第22周   |                      9 |                                8 |</span><br><span class="line">| 第23周   |                     10 |                                6 |</span><br><span class="line">| 第24周   |                      8 |                                6 |</span><br><span class="line">| 第25周   |                      9 |                                6 |</span><br><span class="line">| 第26周   |                     10 |                                7 |</span><br><span class="line">| 第27周   |                     13 |                               10 |</span><br><span class="line">| 第28周   |                     10 |                                9 |</span><br><span class="line">| 第29周   |                      5 |                                5 |</span><br><span class="line">| 第30周   |                      8 |                                5 |</span><br><span class="line">| 第31周   |                     15 |                                8 |</span><br><span class="line">| 第32周   |                      8 |                                4 |</span><br><span class="line">| 第33周   |                      7 |                                2 |</span><br><span class="line">| 第34周   |                      5 |                                2 |</span><br><span class="line">| 第35周   |                     13 |                                9 |</span><br><span class="line">| 第36周   |                      4 |                                2 |</span><br><span class="line">| 第37周   |                      8 |                                6 |</span><br><span class="line">| 第38周   |                     14 |                                7 |</span><br><span class="line">| 第39周   |                     13 |                                9 |</span><br><span class="line">| 第41周   |                      6 |                                5 |</span><br><span class="line">| 第42周   |                     10 |                                6 |</span><br><span class="line">+----------+------------------------+----------------------------------+</span><br><span class="line">38 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.03 sec)</span><br></pre></td></tr></table></figure><p>e.g.4</p><p>Q: 以月为维度统计本年度 downtime 信息(P2 +)</p><p>A:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;第&#x27;</span>, <span class="keyword">month</span>(created_at), <span class="string">&#x27;月&#x27;</span>) <span class="keyword">as</span> <span class="string">&#x27;Month&#x27;</span>, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">&#x27;新增 Downtime 数量&#x27;</span>, </span><br><span class="line"><span class="built_in">sum</span>(if(level <span class="keyword">in</span> (<span class="string">&#x27;P0&#x27;</span>, <span class="string">&#x27;P1&#x27;</span>, <span class="string">&#x27;P2&#x27;</span>), <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">as</span> <span class="string">&#x27;新增 P2 以上 Downtime 数量&#x27;</span> </span><br><span class="line"><span class="keyword">from</span> downtime <span class="keyword">where</span> <span class="keyword">year</span>(created_at)<span class="operator">=</span><span class="number">2018</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">month</span>(created_at);</span><br></pre></td></tr></table></figure><p>使用 <code>month</code> 函数， 该函数默认返回的是当前时间对应的月份(数字 1~12)</p><p><code>monthname函数</code> 函数可以获得对应的英文格式的月份.</p><p>A:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> monthname(created_at) <span class="keyword">as</span> <span class="string">&#x27;Month&#x27;</span>, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">&#x27;新增 Downtime 数量&#x27;</span>, </span><br><span class="line"><span class="built_in">sum</span>(if(level <span class="keyword">in</span> (<span class="string">&#x27;P0&#x27;</span>, <span class="string">&#x27;P1&#x27;</span>, <span class="string">&#x27;P2&#x27;</span>), <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">as</span> <span class="string">&#x27;新增 P2 以上 Downtime 数量&#x27;</span> </span><br><span class="line"><span class="keyword">from</span> downtime <span class="keyword">where</span> <span class="keyword">year</span>(created_at)<span class="operator">=</span><span class="number">2018</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">month</span>(created_at)</span><br></pre></td></tr></table></figure><p>结果集:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+-----------+------------------------+----------------------------------+</span><br><span class="line">| Month     | 新增 Downtime 数量     | 新增 P2 以上 Downtime 数量       |</span><br><span class="line">+-----------+------------------------+----------------------------------+</span><br><span class="line">| January   |                     26 |                               14 |</span><br><span class="line">| February  |                      7 |                                3 |</span><br><span class="line">| March     |                     26 |                               13 |</span><br><span class="line">| April     |                     36 |                               23 |</span><br><span class="line">| May       |                     40 |                               31 |</span><br><span class="line">| June      |                     39 |                               26 |</span><br><span class="line">| July      |                     44 |                               33 |</span><br><span class="line">| August    |                     39 |                               20 |</span><br><span class="line">| September |                     40 |                               25 |</span><br><span class="line">| October   |                     16 |                               11 |</span><br><span class="line">+-----------+------------------------+----------------------------------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.28 sec)</span><br></pre></td></tr></table></figure><p>e.g.5</p><p>Q: 以季度为维度统计本年度 downtime 信息(P2 +)</p><p>A:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;Q-&#x27;</span>, quarter(start_time)) <span class="keyword">as</span> <span class="string">&#x27;季度&#x27;</span>, <span class="built_in">count</span>(start_time) <span class="keyword">as</span> <span class="string">&#x27;新增 Downtime 数量&#x27;</span>, </span><br><span class="line"><span class="built_in">sum</span>(if(level <span class="keyword">in</span> (<span class="string">&#x27;P0&#x27;</span>, <span class="string">&#x27;P1&#x27;</span>, <span class="string">&#x27;P2&#x27;</span>), <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">as</span> <span class="string">&#x27;新增 P2 以上 Downtime 数量&#x27;</span> </span><br><span class="line"><span class="keyword">from</span> downtime <span class="keyword">where</span> <span class="keyword">year</span>(start_time)<span class="operator">=</span><span class="number">2018</span> <span class="keyword">group</span> <span class="keyword">by</span> quarter(start_time);</span><br></pre></td></tr></table></figure><p>结果集:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------+------------------------+----------------------------------+</span><br><span class="line">| 季度   | 新增 Downtime 数量     | 新增 P2 以上 Downtime 数量       |</span><br><span class="line">+--------+------------------------+----------------------------------+</span><br><span class="line">| Q-1    |                     68 |                               36 |</span><br><span class="line">| Q-2    |                    115 |                               83 |</span><br><span class="line">| Q-3    |                    113 |                               69 |</span><br><span class="line">| Q-4    |                     10 |                                8 |</span><br><span class="line">+--------+------------------------+----------------------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.03 sec)</span><br></pre></td></tr></table></figure><p>季度统计，主要使用 <code>quarter</code> 函数.</p><p>MySQL时间日期函数参考: <a href="http://wiki.jikexueyuan.com/project/mysql/useful-functions/time-functions.html">http://wiki.jikexueyuan.com/project/mysql/useful-functions/time-functions.html</a></p>]]></content>
    
    
    <summary type="html">MySQL常见的一些函数使用</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="mysql" scheme="http://lomo.space/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>angular notes</title>
    <link href="http://lomo.space/2017/09/26/angular-notes/"/>
    <id>http://lomo.space/2017/09/26/angular-notes/</id>
    <published>2017-09-26T07:14:21.000Z</published>
    <updated>2022-01-14T11:40:22.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Angular项目笔记"><a href="#Angular项目笔记" class="headerlink" title="Angular项目笔记"></a>Angular项目笔记</h2><blockquote><p>记录📝点Angular项目开发过程中 不熟悉的、陌生的、自认为有需要注意的。</p></blockquote><p>以 <code>autoPublisher</code> <a href="https://gitee.com/lomospace/autoPublisher.git">Project</a>为例.</p><p>项目结构划分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#root</span></span><br><span class="line">├── Temp</span><br><span class="line">├── app</span><br><span class="line">├── build</span><br><span class="line">├── build_w</span><br><span class="line">├── data</span><br><span class="line">├── demo</span><br><span class="line">├── dist</span><br><span class="line">├── gulpfile.js</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── readme.md</span><br><span class="line">├── tmp</span><br><span class="line">└── webpack.config.js</span><br><span class="line"></span><br><span class="line"><span class="comment">#app</span></span><br><span class="line">.</span><br><span class="line">├── app.js</span><br><span class="line">├── css</span><br><span class="line">│   ├── fishBone.css</span><br><span class="line">│   └── imports.css</span><br><span class="line">├── favicon.ico</span><br><span class="line">├── img</span><br><span class="line">│   ├── arrow.png</span><br><span class="line">│   ├── jdb_blue_logo.png</span><br><span class="line">│   ├── jdb_logo.png</span><br><span class="line">│   ├── line-first.png</span><br><span class="line">│   ├── line-point.png</span><br><span class="line">│   ├── loading.gif</span><br><span class="line">│   └── title.png</span><br><span class="line">├── index.html</span><br><span class="line">├── js</span><br><span class="line">│   ├── controllers</span><br><span class="line">│   ├── directives</span><br><span class="line">│   ├── filters</span><br><span class="line">│   └── services</span><br><span class="line">├── lib</span><br><span class="line">│   ├── angular</span><br><span class="line">│   ├── bootstrap</span><br><span class="line">│   ├── fishBone.js</span><br><span class="line">│   ├── font-awesome-4.7.0</span><br><span class="line">│   ├── jquery</span><br><span class="line">│   └── layui</span><br><span class="line">└── views</span><br><span class="line">    ├── autoPublishFishBone.html</span><br><span class="line">    ├── autoPublishFooter.html</span><br><span class="line">    ├── autoPublishNavigationBar.html</span><br><span class="line">    └── autoPublishVersion.html</span><br><span class="line"></span><br><span class="line"><span class="comment">#app/js, tree -L 2</span></span><br><span class="line">.</span><br><span class="line">├── controllers</span><br><span class="line">│   └── index.controller.js</span><br><span class="line">├── directives</span><br><span class="line">│   ├── indexFishBone.directive.js</span><br><span class="line">│   ├── indexFooter.directive.js</span><br><span class="line">│   ├── indexNavigationBar.directive.js</span><br><span class="line">│   └── indexVersion.directive.js</span><br><span class="line">├── filters</span><br><span class="line">│   └── fishBone.filter.js</span><br><span class="line">└── services</span><br><span class="line">    ├── api.service.js</span><br><span class="line">    ├── fishBone.service.js</span><br><span class="line">    ├── fishBoneAction.service.js</span><br><span class="line">    └── utils.service.js</span><br></pre></td></tr></table></figure><p>核心功能主要在<code>app/js</code>下实现。 <code>controllers</code> 主要是对整个控制器。<code>directives</code>是对页面每个块儿的定义以及监听数据变化然后调用<code>Service</code>方法进行页面渲染、数据更新等。<code>filters</code>是对接口返回的数据进行二次处理与包装的过滤器。<code>services</code>文件夹下的Service主要是对公共方法封装以及提供给directive中使用的一些方法。</p><p>在页面中这 <code>controllers</code> <code>directives</code> <code>filters</code> <code>services</code> 的引用顺序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AMD、ES6</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./js/services/utils.service.js&#x27;</span>); <span class="comment">//基本公共方法</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./js/services/api.service.js&#x27;</span>);  <span class="comment">//$http请求封装，其它接口相关</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./js/services/fishBone.service.js&#x27;</span>); <span class="comment">//页面渲染Service</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./js/services/fishBoneAction.service.js&#x27;</span>); <span class="comment">//事件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./js/controllers/index.controller.js&#x27;</span>); <span class="comment">//控制器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./js/filters/fishBone.filter.js&#x27;</span>); <span class="comment">//数据过滤器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./js/directives/indexNavigationBar.directive.js&#x27;</span>); <span class="comment">//nav bar directive</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./js/directives/indexVersion.directive.js&#x27;</span>); <span class="comment">//input directive</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./js/directives/indexFishBone.directive.js&#x27;</span>); <span class="comment">//fishBone, page main</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./js/directives/indexFooter.directive.js&#x27;</span>); <span class="comment">//footer</span></span><br></pre></td></tr></table></figure><p>首先，控制器<code>index.controller</code>依赖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依赖api.service.js的jdbAutoPublisherAPIModule ... 将其依赖一次添加至jdbAutoPublisherApps模块。</span></span><br><span class="line"><span class="keyword">var</span> jdbAutoPublisherApps = angular.<span class="title function_">module</span>(<span class="string">&#x27;jdbAutoPublisherApp&#x27;</span>, [<span class="string">&#x27;jdbAutoPublisherAPIModule&#x27;</span>, <span class="string">&#x27;jdbAutoPublisherFishBoneModule&#x27;</span>, <span class="string">&#x27;jdbAutoPublishUtilsModule&#x27;</span>, <span class="string">&#x27;jdbAutoPublisherFishBoneActionModule&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制器里调用了哪些函数、方法、无论是自定义还是Angular内置，在此处的function里依次注入即可</span></span><br><span class="line"><span class="comment">// 第一种：隐示注入，书写简单，但是在js进行压缩时候会出错，需要使用插件gulp-ng-annotate(若使用gulp的话)</span></span><br><span class="line">jdbAutoPublisherApps.<span class="title function_">controller</span>(<span class="string">&#x27;jdbAutoPublisherCtrl&#x27;</span>, <span class="keyword">function</span>(<span class="params">$scope, jdbAutoPublishUtilsService, jdbAutoPublisherAPIService, $filter</span>) &#123;</span><br><span class="line">    <span class="comment">// do sth...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面👆这个controller依赖注入的另一种写法：</span></span><br><span class="line"><span class="comment">// 显示注入，代码长，不易阅读，压缩不出错</span></span><br><span class="line">jdbAutoPublisherApps.<span class="title function_">controller</span>(<span class="string">&#x27;jdbAutoPublisherCtrl&#x27;</span>, [<span class="string">&#x27;$scope&#x27;</span>, <span class="string">&#x27;jdbAutoPublishUtilsService&#x27;</span>, <span class="string">&#x27;jdbAutoPublisherAPIService&#x27;</span>, <span class="string">&#x27;$filter&#x27;</span>, <span class="keyword">function</span>(<span class="params">$scope, jdbAutoPublishUtilsService, jdbAutoPublisherAPIService, $filter</span>) &#123;</span><br><span class="line">    <span class="comment">// do sth...</span></span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种, $inject的方式</span></span><br><span class="line">jdbAutoPublisherApps.<span class="title function_">controller</span>(<span class="string">&#x27;jdbAutoPublisherCtrl&#x27;</span>, controllerFn);</span><br><span class="line">controllerFn.<span class="property">$inject</span> = [<span class="string">&#x27;$scope&#x27;</span>, <span class="string">&#x27;jdbAutoPublishUtilsService&#x27;</span>, <span class="string">&#x27;jdbAutoPublisherAPIService&#x27;</span>, <span class="string">&#x27;$filter&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">controllerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// do sth...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>controller</code>中如何正确使用<code>Filter</code> ?</p><p>首先，依赖注入<code>$filter</code>, 其次，使用语法：</p><p><code>$filter(&#39;filter名字&#39;)(参数)</code>即可。</p><p>再看看 <code>indexFishBone.directive</code>， 其需要调用<code>fishBone.service</code> 和 <code>api.service</code> 以及 <code>fishBoneAction.serivce</code>里的方法，那么只需在controller的moudle声明是添加对应的依赖，然后再这个directive中的function里注入依赖的Service名即可。</p><p>BTW，如果在directive的return里声明了<code>scope: &#123;&#125;</code>则表示该directive的<code>scope</code>作用域与controller中以及该应用其它地方声明的所有<code>scope</code>作用域都是隔离的。</p><p>其次，directive中如何获取controller中的值？或：controller与directive如何通信？</p><p>当controller通过Service或filter获取到数据后，绑定到<code>scope</code>作用域，在directive中使用<code>$watch</code>监听该作用域上的值即可。(前提：directive中的Scope作用域未隔离！)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wathch第一个参数为绑定在scope作用域上的变量</span></span><br><span class="line">scope.$watch(<span class="string">&#x27;fishData&#x27;</span>, <span class="keyword">function</span>(<span class="params">newVlaue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (scope.<span class="property">fishData</span>) &#123;</span><br><span class="line">        <span class="comment">// do sth</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">angular项目笔记📒</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="angular" scheme="http://lomo.space/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之setTimeout</title>
    <link href="http://lomo.space/2017/09/15/JavaScript%E4%B9%8BsetTimeout/"/>
    <id>http://lomo.space/2017/09/15/JavaScript%E4%B9%8BsetTimeout/</id>
    <published>2017-09-15T01:52:23.000Z</published>
    <updated>2022-01-14T11:40:22.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript之setTimeout"><a href="#JavaScript之setTimeout" class="headerlink" title="JavaScript之setTimeout"></a>JavaScript之setTimeout</h2><p>由<code>setTimeout</code>引发的一些了解 -&gt; 事件循环机制、异步队列、时钟周期、执行上下文</p><blockquote><p>js里常见的2个定时器：<code>setTimeout</code> 和 <code>setInterval</code>，指定一定时间后触发其第一个参数函数(异步回调函数)然后执行函数体内的代码发生一些操作、变化….</p></blockquote><p>e.g.1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">10000</span> ; i++ )&#123;</span><br><span class="line">        i==<span class="number">9999</span> &amp;&amp; <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 输出结果：1 2 3 5 4</span></span><br></pre></td></tr></table></figure><blockquote><p>Pormise，<code>Promise</code> 对象代表一个异步操作，它有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败），Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。</p></blockquote><p>先看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>在浏览器控制台可以看到好像确实是立马就输出123了。</p><p>先看下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am Here !&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这个很好理解，常规思维都是顺序执行，这个结果也是如常规思维所想。</p><p>再看（改变下顺序）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am Here !&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器控制台执行，发现先输出的是<code>for</code>循环内的内容，无论循环条件里是1000还是100 或是 10，都是先执行的循环体最后执行的<code>setTimeout</code></p><p>分析：首先代码被JS解释引擎(如V8)顺序加载解释并执行，到遇到<code>setTimeout</code>函数时，会将其第一个function参数函数放入异步队列排队等待线程空闲后再按照队列顺序执行。</p><p><code>new Promise</code>是第一个参数是一个同步函数，<code>new Promise</code> 最终返回的结果是一个<code>promise</code>对象， <code>.then()</code>方法也是异步的，所以代码执行到此处时会将<code>.then()</code>的回调函数放入一个异步队列，当<code>new Promise</code>返回的<code>promise</code>达到fulfilled状态时且当前线程空闲时就会执行<code>.then()</code>内的异步回调函数输出结果5, 再接着执行<code>console.log(3);</code> 控制台输出3。</p><p>最后当前JS线程已将代码遍历完并执行完，然后获取异步队列的内回调函数，这里关键在于：为什么先执行的是<code>new Promise</code>返回的<code>Promise</code>对象的<code>.then()</code>里的方法而不是<code>setTimeout</code>里的参数函数。因为浏览器或webview的时间钟，时间钟是由机器硬件的时间周期决定(CPU时钟周期)。</p><p>总结：js主线程在执行当前代码这个线程手里，当前线程只有空闲后，才回去处理事件队列，虽然<code>setTimeout</code> 设定的时间已到，但是也得等队列里所有代码已执行完毕，最后才处理<code>setTimeout</code>里的东西。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&quot;console.log(&#x27;test!&#x27;)&quot;</span>, <span class="number">1000</span>); </span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;主线程挂起！&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行试试。必须要等待用户点击确认按钮后才会继续执行。</p><p>因为alert挂起了主线程，使得当前主线程被block(同样的函数还是<code>prompt()</code>, <code>confirm()</code>)，主线程被挂起，整个当前执行js的进程进入等待状态，事件触发或代码执行都被中断，计时器也会<strong>暂停计时</strong> ，当主线程恢复后，余下的代码继续执行，计时器安装时钟周期重新开始计时。</p><p>再看外国网站的例子[JakeArchibald.com]<br>e.g.2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//promise链式调用</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行输出：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><blockquote><p><code>Promise</code>对象经过<code>resolve</code>后的<code>.then</code> 是异步的. 所以promise1 和 promise2的输出会在第3、4行输出；(setTimtout是因为 异步队列+系统时钟周期导致最后被执行–即当前线程空闲时)</p></blockquote><p>进一步修改示例<br>e.g.3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><p>运行后输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">123</span><br><span class="line">script end</span><br><span class="line"></span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><p>再修改：<br>e.g.4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行了new Promise里的resolve&quot;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">123</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise 3&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输出：</span></span><br><span class="line">script start</span><br><span class="line">执行了new Promise里的resolve</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">promise 3</span><br><span class="line">setTimeout</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这是因为 <code>new Promise()</code>里接受一个函数参数<code>function(resolve,reject)</code>用来执行异步执行成功或失败后的处理逻辑。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(value<span class="comment">/*success */</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">successValue</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(successValue); <span class="comment">// 此函数可以接收resolve过来的对象。此处：打印resole过来的值</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">failInfo</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(failInfo); <span class="comment">// 打印错误信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><code>new Promise()</code>里的参数函数，在代码被执行到此处时可以认为是<strong>同步执行</strong>的，其返回的Promise对象使用.then链式调用时其内的函数是被<strong>异步执行</strong>。</p></blockquote><p>参考:<br><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a><br><a href="https://github.com/abbshr/abbshr.github.io/issues/32">https://github.com/abbshr/abbshr.github.io/issues/32</a></p><p><a href="http://www.jianshu.com/p/063f7e490e9a">http://www.jianshu.com/p/063f7e490e9a</a> [Promise基础]</p>]]></content>
    
    
    <summary type="html">JavaScript的setTimeout</summary>
    
    
    
    <category term="essay" scheme="http://lomo.space/categories/essay/"/>
    
    
    <category term="js" scheme="http://lomo.space/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>angularjs之directive</title>
    <link href="http://lomo.space/2017/09/14/angularjs%E4%B9%8Bdirective/"/>
    <id>http://lomo.space/2017/09/14/angularjs%E4%B9%8Bdirective/</id>
    <published>2017-09-14T08:22:31.000Z</published>
    <updated>2022-01-14T11:40:22.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="angularjs之directive"><a href="#angularjs之directive" class="headerlink" title="angularjs之directive"></a>angularjs之directive</h2><p>指令directive的控制器controller、链接link和编译compile</p><p><code>directive</code>指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdb-introductionhtml</span>&gt;</span><span class="tag">&lt;/<span class="name">jdb-introductionhtml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>directive.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">detailsApp.<span class="title function_">directive</span>(<span class="string">&#x27;jdbIntroductionhtml&#x27;</span>, <span class="keyword">function</span>(<span class="params">utilsService</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">restrict</span>: <span class="string">&#x27;EAC&#x27;</span>,</span><br><span class="line">        <span class="attr">replace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// scope: &#123;&#125;,</span></span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;统计周期：本月（&lt;strong&gt;&#123;&#123;beginDate&#125;&#125;~&#123;&#123;endDate&#125;&#125;&lt;/strong&gt;）&lt;/p&gt;&lt;p style=margin-left:40px&gt;&lt;/p&gt;&#x27;</span>,</span><br><span class="line">        <span class="attr">controller</span>: <span class="keyword">function</span>(<span class="params">$scope</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1.directive -- controller&quot;</span>);</span><br><span class="line">            $scope.<span class="property">beginDate</span> = <span class="string">&#x27;0902&#x27;</span>;</span><br><span class="line">            $scope.<span class="property">endDate</span> = <span class="string">&quot;0931&quot;</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(utilsService.<span class="title function_">getPeriod</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">link</span>: <span class="keyword">function</span>(<span class="params">$scope</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2.directive -- link&quot;</span>);</span><br><span class="line">            $scope.<span class="property">beginDate</span> = <span class="string">&#x27;0903&#x27;</span>;</span><br><span class="line">            $scope.<span class="property">endDate</span> = <span class="string">&#x27;0909&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">compile</span>: <span class="keyword">function</span>(<span class="params">$scope</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3.directive -- compile&quot;</span>);</span><br><span class="line">            $scope.<span class="property">beginDate</span> = <span class="string">&#x27;0903&#x27;</span>;</span><br><span class="line">            $scope.<span class="property">endDate</span> = <span class="string">&#x27;0908&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在chrome <code>Console</code> 看到输出顺序：<code>3.directive -- compile</code>, <code>1.directive -- controller</code>,发现link并未打印。是link function没有执行吗。</p><p>了解下它们之间的区别：</p><div style="align:center">    <img src="http://oluzh4sa6.bkt.clouddn.com/GitHubPages/article/20160930141355651.jpg"></div><p>angular对directive指令执行顺序：编译调用compile生成dom对象，再调用link绑定到对应的$scope域(设置事件监听器，监视数据变化和实时的操作DOM.)，最后执行controller；</p><p>使用场景：</p><p>控制器和link函数可以进行互换;控制器主要是用来提供可在指令间复用的行为，但链接函数只能在当前内部指令中定义行为,无法被其它指令间复用；link函数可以将指令互相隔离开来，而controller则定义可复用的行为以供其它指令来调用该指令；</p><p><code>link</code> 对特定元素添加&#x2F;注册事件、增加功能、使用scope的$watch()或者想要与DOM元素做实时的交互；</p><p>简言之，在directive的controller中写的方法操作等可以被暴露出来给其他指令使用；link函数中写的方法只在本指令中使用、有效；compile指令在Angularjs解析我们自定义的HTML标签时最先执行的编译，将自定义的标签进行编译然后进行link或controller 最后产出供浏览器可以识别的DOM进行页面渲染….</p><p>参考：</p><p><a href="https://stackoverflow.com/questions/24615103/angular-directives-when-and-how-to-use-compile-controller-pre-link-and-post">https://stackoverflow.com/questions/24615103/angular-directives-when-and-how-to-use-compile-controller-pre-link-and-post</a></p>]]></content>
    
    
    <summary type="html">AngularJS指令directive之controller、Link、compile</summary>
    
    
    
    <category term="study" scheme="http://lomo.space/categories/study/"/>
    
    
    <category term="js" scheme="http://lomo.space/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Appium/WDA Docs</title>
    <link href="http://lomo.space/2017/09/07/wda-usage-docs/"/>
    <id>http://lomo.space/2017/09/07/wda-usage-docs/</id>
    <published>2017-09-07T09:39:11.000Z</published>
    <updated>2022-01-14T11:40:22.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Appium-环境配置"><a href="#Appium-环境配置" class="headerlink" title="Appium 环境配置"></a>Appium 环境配置</h2><p>本文主要内容:<br>Mac 下 基于 <code>Appium</code> 的自动化测试环境配置笔记。(所有环境版本号以当前最新版本为基础)</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="Mac-环境"><a href="#Mac-环境" class="headerlink" title="Mac 环境"></a>Mac 环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统环境</span></span><br><span class="line">sw_vers</span><br><span class="line">ProductName: Mac OS X</span><br><span class="line">ProductVersion: 10.14.6</span><br><span class="line">BuildVersion: 18G95</span><br><span class="line"></span><br><span class="line">ruby -v</span><br><span class="line">ruby 2.3.7p456</span><br><span class="line"></span><br><span class="line"><span class="comment"># brew 安装, brew 使用参考：https://brew.sh/</span></span><br><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Xcode App Store 直接安装最新版即可</span></span><br><span class="line">xcodebuild -version</span><br><span class="line">Xcode 10.3</span><br></pre></td></tr></table></figure><p>其它依赖的开发软件:<br>Xcode、Android studio，Android Studio 安装完毕后，下载 SDK ( Android )。</p><h4 id="Java-x2F-Android-基础环境"><a href="#Java-x2F-Android-基础环境" class="headerlink" title="Java&#x2F;Android 基础环境"></a>Java&#x2F;Android 基础环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Java，推荐使用 JDK8 或 JDK11，暂不推荐最新版 JDK12</span></span><br><span class="line"><span class="comment"># 注意: 目前官网下载 JDK 是需要 Oracle 账户</span></span><br><span class="line">java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_221&quot;</span></span><br><span class="line"></span><br><span class="line">mvn -v</span><br><span class="line">Apache Maven 3.6.1</span><br></pre></td></tr></table></figure><p>Java 及其相关环境变量配置参考:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=<span class="string">&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/&quot;</span></span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">MAVEN_HOME=<span class="string">&quot;/Users/lomo/env/apache-maven-3.6.1&quot;</span></span><br><span class="line">PATH=<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Android environment</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=<span class="string">&quot;/Users/lomo/Library/Android/sdk&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;ANDROID_HOME&#125;</span>/tools</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;ANDROID_HOME&#125;</span>/platform-tools</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="string">&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/bin:/usr/local/sbin:~/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h3 id="系统依赖软件安装"><a href="#系统依赖软件安装" class="headerlink" title="系统依赖软件安装"></a>系统依赖软件安装</h3><h4 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h4><p>Appium 安装有 2 种方式:</p><p>1.GUI 版</p><p>下载 dmg 文件安装即可.<br>该种方式对应的 WDA 文件路径:</p><blockquote><p>&#x2F;Applications&#x2F;Appium.app&#x2F;Contents&#x2F;Resources&#x2F;app&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;appium-xcuitest-driver&#x2F;WebDriverAgent</p></blockquote><p>2.无 GUI 版</p><blockquote><p>npm install -g appium</p></blockquote><p>安装指定版本:</p><blockquote><p>npm install -g <a href="mailto:&#97;&#112;&#112;&#x69;&#117;&#x6d;&#x40;&#x31;&#46;&#49;&#51;&#x2e;&#x30;">&#97;&#112;&#112;&#x69;&#117;&#x6d;&#x40;&#x31;&#46;&#49;&#51;&#x2e;&#x30;</a></p></blockquote><p>此种方式的 WDA 路径:</p><blockquote><p>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;appium&#x2F;node_modules&#x2F;<a href="mailto:&#95;&#97;&#112;&#112;&#105;&#x75;&#109;&#45;&#x77;&#101;&#98;&#100;&#x72;&#105;&#x76;&#101;&#114;&#97;&#103;&#x65;&#x6e;&#116;&#x40;&#x31;&#46;&#50;&#46;&#x30;">&#95;&#97;&#112;&#112;&#105;&#x75;&#109;&#45;&#x77;&#101;&#98;&#100;&#x72;&#105;&#x76;&#101;&#114;&#97;&#103;&#x65;&#x6e;&#116;&#x40;&#x31;&#46;&#50;&#46;&#x30;</a>@appium-webdriveragent</p></blockquote><p>如果 <code>npm</code> 较慢或者有其它问题，则使用 cnpm 即可.</p><blockquote><p>npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p></blockquote><h4 id="iOS-真机环境相关"><a href="#iOS-真机环境相关" class="headerlink" title="iOS 真机环境相关"></a>iOS 真机环境相关</h4><p>1.Carthage<br>套件管理工具，与 CocoaPods 类似。<br>详细说明可参考: <a href="https://gist.github.com/weihanglo/97e949a9dbf92deb111999b6e42e9654">https://gist.github.com/weihanglo/97e949a9dbf92deb111999b6e42e9654</a></p><blockquote><p>brew update &amp;&amp; brew install carthage</p></blockquote><p>2.ios-deploy</p><blockquote><p>终端安装和调试iPhone应用的是第三方开源库</p></blockquote><p>使用参考: <a href="https://www.jianshu.com/p/9b9136fa1444">https://www.jianshu.com/p/9b9136fa1444</a></p><p>安装通过 npm</p><blockquote><p>npm install -g ios-deploy</p></blockquote><p>3.libimobiledevice<br>该开源工具包，支持 Linux 链接 iPhone 等 iOS 设备.</p><p>这个工具包的作用就是要做一个类似于 Android 中的 adb 命令行工具！！！</p><blockquote><p>brew update &amp;&amp; brew install libimobiledevice –HEAD</p></blockquote><p>查看 iOS 设备 uuid:</p><blockquote><p>idevice_id –list</p></blockquote><p>4.ideviceinstaller<br>方便查看 iOS 设备上安装的 APP 的 bundleId</p><blockquote><p>brew install ideviceinstaller</p></blockquote><p>使用:<br>ideviceinstaller –help</p><blockquote><p>ideviceinstaller -l # 列出本机安装的所有 app 的bundle id</p></blockquote><p>安装 ipa:</p><blockquote><p>ideviceinstaller -i xxx.ipa</p></blockquote><p>卸载 ipa</p><blockquote><p>ideviceinstaller -U [bundleID]</p></blockquote><p>如果使用时报错类似如下信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not connect to lockdownd. Exiting.</span><br></pre></td></tr></table></figure><p>解决方案:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall -f libimobiledevice ideviceinstaller usbmuxd</span><br><span class="line"><span class="comment"># 或：</span></span><br><span class="line">brew uninstall --ignore-dependencies libimobiledevice ideviceinstaller usbmuxd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再源码编译安装即可</span></span><br><span class="line">brew install -v --HEAD  --build-from-source usbmuxd libimobiledevice ideviceinstaller</span><br></pre></td></tr></table></figure><p>参考: <a href="https://github.com/libimobiledevice/ideviceinstaller">https://github.com/libimobiledevice/ideviceinstaller</a></p><p>4.xcpretty<br>主要是增加 xcodebuild 输出可读性. 可选 !</p><blockquote><p>gem install xcpretty</p></blockquote><p>Gem 是 Ruby 依赖包管理工具。类似于 iOS 开发中的 CocoaPods，Java 中的 maven、ant …..</p><h4 id="Android-真机环境"><a href="#Android-真机环境" class="headerlink" title="Android 真机环境"></a>Android 真机环境</h4><p>配置好 JAVA、Android 相关的环境变量，安装一个 SDK，并选择同意相关的 License，然后就直接配置参数链接真机操作即可。</p><h4 id="编译-WDA"><a href="#编译-WDA" class="headerlink" title="编译 WDA"></a>编译 WDA</h4><blockquote><p>本地编译 WDA 主要是为了 iOS 解决相关证书问题。该步骤针对链接 iOS 设备是必经步骤！</p></blockquote><p>桌面版&#x2F;无 GUI 版，按照上述的安装路径，打开对应的 xcode 工程, 打开项目导航(点击最左侧导航栏文件夹按钮),然后右侧会展示 PROJECT 导航，选择 TARGETS 下的，分别选中 WebDriverAgentLib 和 WebDriverAgentRunner，修改其 <code>Signing</code> 签名，改为自己的 Apple ID 即可，同时修改 Build Settings 下 Packaging 下的 Bundle Identifier。</p><blockquote><p>主要是将原来的 xxx.facebook.xx.wda.xx 中的 facebook 改一下即可，为了区分 bundleId</p></blockquote><p>选择手机编译至对应的 iOS 设备上即可 (AgentRunner)。</p><p>注意: 如果 Build 真机还报错，则将下面的几个 Targets 页添加上, 主要是 bunlderId 修改和 Signing.</p><p>添加成功后，会看到签名对应处 <code>Signing Certificate iPhone Developer: 你的 Apple ID (Team ID: 一个长度为10的大写字母串)</code></p><h3 id="iOS-真机配置"><a href="#iOS-真机配置" class="headerlink" title="iOS 真机配置"></a>iOS 真机配置</h3><p>Desired Capabilities 配置如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;udid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uuid&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;platformName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iOS&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;automationName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XCUITest&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bundleId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;APP的 bundleId&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;platformVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11.4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deviceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;设备名&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>设备名称通过 <code>idevicename</code> 即可获取<br>uuid 通过 <code>idevice_id -l</code> 获取通过 USB 链接的 iOS 设备列表</p><h3 id="Android-真机配置"><a href="#Android-真机配置" class="headerlink" title="Android 真机配置"></a>Android 真机配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;platformName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Android&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;platformVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deviceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lomo-note3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;noReset&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/lomo/Downloads/app-debug.apk&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="框架设计"><a href="#框架设计" class="headerlink" title="框架设计"></a>框架设计</h3><p>关注点:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 可扩展性</span><br><span class="line">2. 可维护性</span><br><span class="line">3. 可推广性</span><br><span class="line">4. 投入/产出比</span><br></pre></td></tr></table></figure><p>具体框架设计细节暂不赘述.</p>]]></content>
    
    
    <summary type="html">Appium 真机测试环境配置与使用</summary>
    
    
    
    <category term="program" scheme="http://lomo.space/categories/program/"/>
    
    
    <category term="appium" scheme="http://lomo.space/tags/appium/"/>
    
    <category term="wda" scheme="http://lomo.space/tags/wda/"/>
    
  </entry>
  
  <entry>
    <title>angularjs之timeout</title>
    <link href="http://lomo.space/2017/08/20/angularjs%E4%B9%8Btimeout/"/>
    <id>http://lomo.space/2017/08/20/angularjs%E4%B9%8Btimeout/</id>
    <published>2017-08-20T07:51:13.000Z</published>
    <updated>2022-01-14T11:40:22.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AngularJS之-timeout"><a href="#AngularJS之-timeout" class="headerlink" title="AngularJS之$timeout"></a>AngularJS之$timeout</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>需求：用户登录时，如果用户名或密码输入框输入错误，予以相应的错误提示并将错误提示实现类似于<code>jQuery</code>的 <code>fadeOut()</code>效果，几秒后自动消失。</p><p>使用 <code>ng-show</code> 或 <code>ng-if</code> 来显示对应错误，这2个ng指令属性默认值为<code>false</code>。</p><p>当<code>controller</code> work起来触发了相应的条件时，controller会将对应的 <code>ng-show</code> 或 <code>ng-if</code> 值置为 <code>true</code>, 并给对应的错误信息变量赋值.</p><h3 id="过程-结果"><a href="#过程-结果" class="headerlink" title="过程+结果"></a>过程+结果</h3><p><em>html部分</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error-info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text-error text-danger&quot;</span> <span class="attr">ng-show</span>=<span class="string">&quot;isError&quot;</span>&gt;</span>&#123;&#123;errorInfo&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>#双大括号在某些条件不友好，可使用 <code>ng-cloak</code> 等<br>参考：<br><a href="http://lomo.space/2016/12/21/angular-study-note/#Angular%E8%A1%A8%E8%BE%BE%E5%BC%8F">http://lomo.space/2016/12/21/angular-study-note/#Angular表达式</a></p></blockquote><p><em>js部分</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginAPP = angular.<span class="title function_">module</span>(<span class="string">&quot;loginApp&quot;</span>, [<span class="string">&#x27;loginModel&#x27;</span>]);</span><br><span class="line">loginAPP.<span class="title function_">controller</span>(<span class="string">&#x27;loginAppController&#x27;</span>, <span class="keyword">function</span>(<span class="params">$scope, $http, loginService</span>) &#123;</span><br><span class="line">    $scope.<span class="property">loginLdap</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> username = $scope.<span class="property">username</span>;</span><br><span class="line">        <span class="keyword">var</span> password = $scope.<span class="property">password</span>;</span><br><span class="line">        <span class="comment">//影藏错误信息, 使用setTimeout简单实现fadeOut功能（忽略动画）</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            $scope.<span class="property">isError</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//$scope.errorInfo = &quot;&quot;;</span></span><br><span class="line">            $scope.$apply(); <span class="comment">// important !!!</span></span><br><span class="line">            &#125;, <span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (username === <span class="literal">undefined</span> || password === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            $scope.<span class="property">isError</span> = <span class="literal">true</span>;</span><br><span class="line">            $scope.<span class="property">errorInfo</span> = <span class="string">&quot;用户名/密码不能为空！&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当触发条件后，JS手动修改的model <code>&#123;&#123;isError&#125;&#125;</code> 的值，model被修改后并未通知AngulaJS, 所以ng 不会主动去update view, 需要手动调用 <code>$scope.$apply();</code> .</p><p><code>$scope.$apply()</code> 这种无参形式调用，不推荐！应该将对应的函数作为一个参数传给<code>$apply()</code>，Angular的 <code>$apply()</code>会将传入的参数function包装进 <code>try catch</code> 块儿中，当参数函数抛异常时就能被catch块儿捕获。</p><p>修改后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> $timeout(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $scope.<span class="property">isError</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>总结：当使用原生JS或其它非AngularJS内置函数&#x2F;方法更新了Model后都需要手动调用 <code>$apply()</code> 以此来通知Angular的 <code>watcher</code> , watcher 被触发后，Angular就会检测scope模型model。</p><p>参考：<br><a href="http://blog.csdn.net/dm_vincent/article/details/38705099">http://blog.csdn.net/dm_vincent/article/details/38705099</a></p>]]></content>
    
    
    <summary type="html">AngularJS的$timeout</summary>
    
    
    
    <category term="program" scheme="http://lomo.space/categories/program/"/>
    
    
    <category term="js" scheme="http://lomo.space/tags/js/"/>
    
    <category term="angularjs" scheme="http://lomo.space/tags/angularjs/"/>
    
  </entry>
  
</feed>
